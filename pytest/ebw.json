{"report": {"environment": {"Python": "3.9.6", "Platform": "macOS-14.3.1-arm64-arm-64bit"}, "tests": [{"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_open_url_stage", "duration": 65.82660779, "run_index": 0, "setup": {"name": "setup", "duration": 2.580322041, "outcome": "passed"}, "call": {"name": "call", "duration": 60.665852708, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011099999999686361, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_open_url_prod", "duration": 68.96568420800003, "run_index": 1, "setup": {"name": "setup", "duration": 1.4488387080000038, "outcome": "passed"}, "call": {"name": "call", "duration": 66.06790216700001, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010462500000585351, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_title_stage", "duration": 78.46686958299998, "run_index": 2, "setup": {"name": "setup", "duration": 1.3979684999999904, "outcome": "passed"}, "call": {"name": "call", "duration": 75.670758958, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001736250000021755, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_title_prod", "duration": 58.527007166000004, "run_index": 3, "setup": {"name": "setup", "duration": 1.4602399160000061, "outcome": "passed"}, "call": {"name": "call", "duration": 55.60641816699999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010916700000507262, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_mosaic_area_stage", "duration": 58.70887212399998, "run_index": 4, "setup": {"name": "setup", "duration": 1.4097268329999793, "outcome": "passed"}, "call": {"name": "call", "duration": 55.889303125000026, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011533299999655355, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_mosaic_area_prod", "duration": 99.72069579100003, "run_index": 5, "setup": {"name": "setup", "duration": 1.4281701250000083, "outcome": "passed"}, "call": {"name": "call", "duration": 96.86418370800004, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001718329999675916, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_add_shemedia_stage", "duration": 75.73121291799993, "run_index": 6, "setup": {"name": "setup", "duration": 1.4514061669999592, "outcome": "passed"}, "call": {"name": "call", "duration": 72.82816695899999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00023362500002122033, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_add_shemedia_prod", "duration": 59.0108345000001, "run_index": 7, "setup": {"name": "setup", "duration": 1.5008262500000455, "outcome": "passed"}, "call": {"name": "call", "duration": 56.009052875000066, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012912499994399695, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_open_url_stage", "duration": 35.10795833500015, "run_index": 8, "setup": {"name": "setup", "duration": 1.4367921670000214, "outcome": "passed"}, "call": {"name": "call", "duration": 32.23426233400005, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011166700005560415, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_open_url_prod", "duration": 7.5143093349998935, "run_index": 9, "setup": {"name": "setup", "duration": 1.5809770839999828, "outcome": "passed"}, "call": {"name": "call", "duration": 4.352239624999925, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011554200000318815, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_title_stage", "duration": 52.7370212080001, "run_index": 10, "setup": {"name": "setup", "duration": 1.429907958000058, "outcome": "passed"}, "call": {"name": "call", "duration": 49.87684066700001, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0003646249999746942, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_title_prod", "duration": 21.3537654590001, "run_index": 11, "setup": {"name": "setup", "duration": 1.5210200000000214, "outcome": "passed"}, "call": {"name": "call", "duration": 18.31160145900003, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001240000000279906, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_add_shemedia_stage", "duration": 21.679312126000013, "run_index": 12, "setup": {"name": "setup", "duration": 1.4370761669999865, "outcome": "passed"}, "call": {"name": "call", "duration": 18.805030500000044, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012929199999689445, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_add_shemedia_prod", "duration": 49.99469429199996, "run_index": 13, "setup": {"name": "setup", "duration": 1.4302304169999616, "outcome": "passed"}, "call": {"name": "call", "duration": 47.13412258300002, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011087500001849548, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_open_url_stage", "duration": 38.39599733200009, "run_index": 14, "setup": {"name": "setup", "duration": 1.4465896250000014, "outcome": "passed"}, "call": {"name": "call", "duration": 35.50269016600009, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012791599999673053, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_open_url_prod", "duration": 20.26727575200016, "run_index": 15, "setup": {"name": "setup", "duration": 1.9325012090000655, "outcome": "passed"}, "call": {"name": "call", "duration": 16.40215487499995, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011845900007756427, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_title_stage", "duration": 73.40977974999998, "run_index": 16, "setup": {"name": "setup", "duration": 1.5595585419999907, "outcome": "passed"}, "call": {"name": "call", "duration": 70.29054974999997, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001129160000346019, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_title_prod", "duration": 29.916154375000133, "run_index": 17, "setup": {"name": "setup", "duration": 1.4249854170000162, "outcome": "passed"}, "call": {"name": "call", "duration": 27.06607133300008, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011220800001865427, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_mosaic_area_stage", "duration": 82.79178870900012, "run_index": 18, "setup": {"name": "setup", "duration": 1.399713125000062, "outcome": "passed"}, "call": {"name": "call", "duration": 79.99218666699994, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001757920000500235, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_mosaic_area_prod", "duration": 76.96682966599997, "run_index": 19, "setup": {"name": "setup", "duration": 1.4064072500000293, "outcome": "passed"}, "call": {"name": "call", "duration": 74.15382950000003, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001856659998793475, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_add_shemedia_stage", "duration": 43.64737716600007, "run_index": 20, "setup": {"name": "setup", "duration": 1.4125774999999976, "outcome": "passed"}, "call": {"name": "call", "duration": 40.82210925000004, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001129160000346019, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_add_shemedia_prod", "duration": 35.55938170700006, "run_index": 21, "setup": {"name": "setup", "duration": 1.4585592910000287, "outcome": "passed"}, "call": {"name": "call", "duration": 32.642121417, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00014170800000101735, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_login_stage", "duration": 73.93279666599983, "run_index": 22, "setup": {"name": "setup", "duration": 1.5064359579998836, "outcome": "passed"}, "call": {"name": "call", "duration": 70.919804333, "outcome": "passed", "stdout": "test_login STAGE\nError al aceptar cookies: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n"}, "teardown": {"name": "teardown", "duration": 0.00012041700006193423, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_open_url_stage", "duration": 59.48648216599986, "run_index": 23, "setup": {"name": "setup", "duration": 1.4718272909999541, "outcome": "passed"}, "call": {"name": "call", "duration": 56.542653125000015, "outcome": "passed", "stdout": "test_open_url STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00017445899993617786, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_title_stage", "duration": 73.5278829570002, "run_index": 24, "setup": {"name": "setup", "duration": 1.4807652080000935, "outcome": "passed"}, "call": {"name": "call", "duration": 70.56619329099999, "outcome": "passed", "stdout": "test_title STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00015925000002425804, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_any_clip_stage", "duration": 68.5475134589999, "run_index": 25, "setup": {"name": "setup", "duration": 1.597638416999871, "outcome": "passed"}, "call": {"name": "call", "duration": 65.3521017500002, "outcome": "xfailed", "xfail_reason": "", "longrepr": "self = <pages.desktop.test_main_desktop.TestMain object at 0x117521250>, setup = None\n\n    @pytest.mark.xfail\n    def test_any_clip_stage(self, setup):\n        try:\n            print(\"test_any_clip STAGE\")\n>           self.selenium_test.search_ad_by_class_name(self.selenium_test.main_url(urls.main_stage), \"mediaWidget\")\n\npages/desktop/test_main_desktop.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/global_functions.py:129: in search_ad_by_class_name\n    assert self.driver.find_element(By.CLASS_NAME, classname)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x11765aee0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .mediaWidget\",\"stac.../content/shared/webdriver/Errors.sys.mjs:509:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .mediaWidget; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException", "stdout": "test_any_clip STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.0001348749999579013, "outcome": "passed"}, "outcome": "xfailed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_she_ads_conditional_stage", "duration": 64.68220370900008, "run_index": 26, "setup": {"name": "setup", "duration": 1.4217301250000673, "outcome": "passed"}, "call": {"name": "call", "duration": 61.83863345899999, "outcome": "passed", "stdout": "test_she_ads_conditional STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00010999999994965037, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_login_prod", "duration": 43.04786575200001, "run_index": 27, "setup": {"name": "setup", "duration": 1.476701458999969, "outcome": "passed"}, "call": {"name": "call", "duration": 40.09433020899996, "outcome": "passed", "stdout": "test_login PROD\nError al aceptar cookies: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n"}, "teardown": {"name": "teardown", "duration": 0.00013262500010569056, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_open_url_prod", "duration": 7.436554042999887, "run_index": 28, "setup": {"name": "setup", "duration": 1.4705371249999644, "outcome": "passed"}, "call": {"name": "call", "duration": 4.495372958999951, "outcome": "passed", "stdout": "test_open_url PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00010683400000743859, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_title_prod", "duration": 58.98651520799967, "run_index": 29, "setup": {"name": "setup", "duration": 1.456308166999861, "outcome": "passed"}, "call": {"name": "call", "duration": 56.073757790999935, "outcome": "passed", "stdout": "test_title PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00014108300001680618, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_any_clip_prod", "duration": 37.82968524800003, "run_index": 30, "setup": {"name": "setup", "duration": 1.4559052080001038, "outcome": "passed"}, "call": {"name": "call", "duration": 34.917749165999794, "outcome": "xfailed", "xfail_reason": "", "longrepr": "self = <pages.desktop.test_main_desktop.TestMain object at 0x1175219d0>, setup = None\n\n    @pytest.mark.xfail\n    def test_any_clip_prod(self, setup):\n        try:\n            print(\"test_any_clip PROD\")\n>           self.selenium_test.search_ad_by_class_name(self.selenium_test.main_url(urls.main_prod), \"mediaWidget\")\n\npages/desktop/test_main_desktop.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/global_functions.py:129: in search_ad_by_class_name\n    assert self.driver.find_element(By.CLASS_NAME, classname)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x117695e80>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .mediaWidget\",\"stac.../content/shared/webdriver/Errors.sys.mjs:509:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .mediaWidget; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException", "stdout": "test_any_clip PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00012566600003083295, "outcome": "passed"}, "outcome": "xfailed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_she_ads_conditional_prod", "duration": 20.943656876000205, "run_index": 31, "setup": {"name": "setup", "duration": 1.4844799590000548, "outcome": "passed"}, "call": {"name": "call", "duration": 17.97458533300005, "outcome": "passed", "stdout": "test_she_ads_conditional PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00011162500004502363, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_open_url_stage", "duration": 32.1728349980001, "run_index": 32, "setup": {"name": "setup", "duration": 1.4412785829999848, "outcome": "passed"}, "call": {"name": "call", "duration": 29.290165290999994, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011254100013502466, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_title_stage", "duration": 25.258760832999997, "run_index": 33, "setup": {"name": "setup", "duration": 1.4401572080000733, "outcome": "passed"}, "call": {"name": "call", "duration": 22.37832574999993, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001206669999191945, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_open_url_prod", "duration": 54.71293395800012, "run_index": 34, "setup": {"name": "setup", "duration": 1.4377142920000097, "outcome": "passed"}, "call": {"name": "call", "duration": 51.83738379100009, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012158300000919553, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_title_prod", "duration": 41.5257791680001, "run_index": 35, "setup": {"name": "setup", "duration": 1.461038459000065, "outcome": "passed"}, "call": {"name": "call", "duration": 38.60358341699998, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001188329999877169, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_add_shemedia_stage", "duration": 52.1555384589999, "run_index": 36, "setup": {"name": "setup", "duration": 1.495399708999912, "outcome": "passed"}, "call": {"name": "call", "duration": 49.16462212500005, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011691600002450286, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_add_shemedia_prod", "duration": 53.80380750199993, "run_index": 37, "setup": {"name": "setup", "duration": 1.4849607090000063, "outcome": "passed"}, "call": {"name": "call", "duration": 50.83377304199985, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011304200006634346, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_open_url_stage", "duration": 41.60266583299972, "run_index": 38, "setup": {"name": "setup", "duration": 1.4648556249999274, "outcome": "passed"}, "call": {"name": "call", "duration": 38.67284174999986, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011283300000286545, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_open_url_prod", "duration": 7.658361876000072, "run_index": 39, "setup": {"name": "setup", "duration": 1.5261200420000023, "outcome": "passed"}, "call": {"name": "call", "duration": 4.605993791999936, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012800000013157842, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_title_prod", "duration": 303.44341174999977, "run_index": 40, "setup": {"name": "setup", "duration": 1.4607222499998898, "outcome": "passed"}, "call": {"name": "call", "duration": 300.5218242499998, "outcome": "failed", "longrepr": "self = <pages.desktop.test_popular_desktop.TestPopular object at 0x11752dee0>, setup = None\n\n    def test_title_prod(self, setup):\n        try:\n>           self.selenium_test.open_url_maximize(self.selenium_test.main_url(urls.popular_prod))\n\npages/desktop/test_popular_desktop.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/global_functions.py:96: in open_url_maximize\n    self.driver.get(url)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:353: in get\n    self.execute(Command.GET, {\"url\": url})\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x11766b820>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"Navigation timed out after 300000 ms\",\"stacktrace\":\"R...ote/content/shared/webdriver/Errors.sys.mjs:723:5\\\\nbail@chrome://remote/content/marionette/sync.sys.mjs:211:19\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: Navigation timed out after 300000 ms\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nE       TimeoutError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:723:5\nE       bail@chrome://remote/content/marionette/sync.sys.mjs:211:19\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException"}, "teardown": {"name": "teardown", "duration": 0.0001430000002073939, "outcome": "passed"}, "outcome": "failed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_title_stage", "duration": 83.30803425099975, "run_index": 41, "setup": {"name": "setup", "duration": 1.4597467919998053, "outcome": "passed"}, "call": {"name": "call", "duration": 80.38842770800011, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011295900003460702, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_add_shemedia_stage", "duration": 73.9060519160007, "run_index": 42, "setup": {"name": "setup", "duration": 1.5610027910001918, "outcome": "passed"}, "call": {"name": "call", "duration": 70.78394025000034, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010608399998091045, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_add_shemedia_prod", "duration": 42.074308124000254, "run_index": 43, "setup": {"name": "setup", "duration": 1.4820092079999085, "outcome": "passed"}, "call": {"name": "call", "duration": 39.110181792000276, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010791600016091252, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_youtube_stage", "duration": 0.0002523760008443787, "run_index": 44, "setup": {"name": "setup", "duration": 9.654200039221905e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 12, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 5.929200005994062e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_twitter_stage", "duration": 0.00017520800065540243, "run_index": 45, "setup": {"name": "setup", "duration": 6.15000003563182e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 22, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 5.220799994276604e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_tik_tok_stage", "duration": 0.0001594170003045292, "run_index": 46, "setup": {"name": "setup", "duration": 5.5250000059459126e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 32, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 4.891700018561096e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_instagram_stage", "duration": 0.00016587500022069435, "run_index": 47, "setup": {"name": "setup", "duration": 5.662500007019844e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 42, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 5.262500008029747e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_open_url_stage", "duration": 26.672539501999836, "run_index": 48, "setup": {"name": "setup", "duration": 1.5543323339998096, "outcome": "passed"}, "call": {"name": "call", "duration": 23.563768584000172, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010625000004438334, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_open_url_prod", "duration": 20.521698499999275, "run_index": 49, "setup": {"name": "setup", "duration": 1.4350199169998632, "outcome": "passed"}, "call": {"name": "call", "duration": 17.651550332999705, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001083329998436966, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_title_stage", "duration": 58.97092279199978, "run_index": 50, "setup": {"name": "setup", "duration": 1.4810378749998563, "outcome": "passed"}, "call": {"name": "call", "duration": 56.00874245799969, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010458400038260152, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_title_prod", "duration": 49.41054975100042, "run_index": 51, "setup": {"name": "setup", "duration": 1.477488084000015, "outcome": "passed"}, "call": {"name": "call", "duration": 46.45545233300027, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012125000012019882, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_add_shemedia_stage", "duration": 75.81896679099918, "run_index": 52, "setup": {"name": "setup", "duration": 1.4551904579998336, "outcome": "passed"}, "call": {"name": "call", "duration": 72.90838933299983, "outcome": "failed", "longrepr": "self = <pages.desktop.test_videos_desktop.TestVideos object at 0x11753e5b0>, setup = None\n\n    def test_add_shemedia_stage(self, setup):\n        try:\n>           self.selenium_test.search_ad_by_class_id(self.selenium_test.main_url(urls.videos_stage), \"skm-ad-banner-1\")\n\npages/desktop/test_videos_desktop.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/global_functions.py:118: in search_ad_by_class_id\n    self.open_url_maximize(self.main_url(url))\npages/global_functions.py:97: in open_url_maximize\n    self.driver.maximize_window()\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:496: in maximize_window\n    self.execute(command, None)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1177f36a0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"WebDriver session does not exist, or is no...ionette/server.sys.mjs:263:9\\\\n_onJSONObjectReady/<@chrome://remote/content/marionette/transport.sys.mjs:494:20\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: WebDriver session does not exist, or is not active\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nE       InvalidSessionIDError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:446:5\nE       assert.that/<@chrome://remote/content/shared/webdriver/Assert.sys.mjs:485:13\nE       assert.session@chrome://remote/content/shared/webdriver/Assert.sys.mjs:37:4\nE       despatch@chrome://remote/content/marionette/server.sys.mjs:315:19\nE       execute@chrome://remote/content/marionette/server.sys.mjs:289:16\nE       onPacket/<@chrome://remote/content/marionette/server.sys.mjs:262:20\nE       onPacket@chrome://remote/content/marionette/server.sys.mjs:263:9\nE       _onJSONObjectReady/<@chrome://remote/content/marionette/transport.sys.mjs:494:20\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidSessionIdException"}, "teardown": {"name": "teardown", "duration": 0.00019654199968499597, "outcome": "passed"}, "outcome": "failed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_add_shemedia_prod", "duration": 48.97733416500023, "run_index": 53, "setup": {"name": "setup", "duration": 2.722020416000305, "outcome": "passed"}, "call": {"name": "call", "duration": 43.53318070799969, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011262499992881203, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/mobile/test_main_mobile.py::TestMain::test_login_stage", "duration": 0.0006462919996010896, "run_index": 54, "setup": {"name": "setup", "duration": 8.24999997348641e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/mobile/test_main_mobile.py', 13, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 0.0004812920001313614, "outcome": "passed"}, "outcome": "skipped"}], "summary": {"passed": 46, "xfailed": 2, "failed": 2, "skipped": 5, "num_tests": 55, "duration": 2678.8747549057007}, "created_at": "2024-03-20 13:46:37.881313"}}