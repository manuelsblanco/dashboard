{"report": {"environment": {"Python": "3.9.6", "Platform": "macOS-14.3.1-arm64-arm-64bit"}, "tests": [{"name": "test_articles_desktop.py::TestArticles::test_open_url_stage", "duration": 9.8416935, "run_index": 0, "setup": {"name": "setup", "duration": 0.916821917, "outcome": "passed"}, "call": {"name": "call", "duration": 8.007942791, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001068750000001728, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_articles_desktop.py::TestArticles::test_open_url_prod", "duration": 15.600743457000002, "run_index": 1, "setup": {"name": "setup", "duration": 1.4620406250000002, "outcome": "passed"}, "call": {"name": "call", "duration": 12.676550541, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001116660000022307, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_articles_desktop.py::TestArticles::test_title_stage", "duration": 10.559862418000002, "run_index": 2, "setup": {"name": "setup", "duration": 1.4678951669999982, "outcome": "passed"}, "call": {"name": "call", "duration": 7.623940750000003, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00013133400000242546, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_articles_desktop.py::TestArticles::test_title_prod", "duration": 15.422299584999998, "run_index": 3, "setup": {"name": "setup", "duration": 1.4412602089999993, "outcome": "passed"}, "call": {"name": "call", "duration": 12.539669124999996, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011004200000286346, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_articles_desktop.py::TestArticles::test_mosaic_area_stage", "duration": 9.58353120800001, "run_index": 4, "setup": {"name": "setup", "duration": 1.4614388330000025, "outcome": "passed"}, "call": {"name": "call", "duration": 6.660542833000001, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011070900000476058, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_articles_desktop.py::TestArticles::test_mosaic_area_prod", "duration": 19.18075100100001, "run_index": 5, "setup": {"name": "setup", "duration": 1.4353747090000013, "outcome": "passed"}, "call": {"name": "call", "duration": 16.309889375000004, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011220800000444342, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_articles_desktop.py::TestArticles::test_add_shemedia_stage", "duration": 9.62932020800001, "run_index": 6, "setup": {"name": "setup", "duration": 1.4741247500000014, "outcome": "passed"}, "call": {"name": "call", "duration": 6.6809425000000005, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012820800000667987, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_articles_desktop.py::TestArticles::test_add_shemedia_prod", "duration": 9.795181083000017, "run_index": 7, "setup": {"name": "setup", "duration": 1.4681919580000056, "outcome": "passed"}, "call": {"name": "call", "duration": 6.858685167000004, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011200000000144428, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_galleries_desktop.py::TestGalleries::test_open_url_stage", "duration": 10.188596960999988, "run_index": 8, "setup": {"name": "setup", "duration": 1.4442988339999943, "outcome": "passed"}, "call": {"name": "call", "duration": 7.299885834000008, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011345899999071207, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_galleries_desktop.py::TestGalleries::test_open_url_prod", "duration": 9.808153083000008, "run_index": 9, "setup": {"name": "setup", "duration": 1.4950767079999991, "outcome": "passed"}, "call": {"name": "call", "duration": 6.81789670900001, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010295799999937572, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_galleries_desktop.py::TestGalleries::test_title_stage", "duration": 9.749099373999982, "run_index": 10, "setup": {"name": "setup", "duration": 1.48092299999999, "outcome": "passed"}, "call": {"name": "call", "duration": 6.7871389160000035, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011445799999876272, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_galleries_desktop.py::TestGalleries::test_title_prod", "duration": 9.427076459000006, "run_index": 11, "setup": {"name": "setup", "duration": 1.4139436250000017, "outcome": "passed"}, "call": {"name": "call", "duration": 6.599089042000003, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010016699999937373, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_galleries_desktop.py::TestGalleries::test_add_shemedia_stage", "duration": 9.742848209000002, "run_index": 12, "setup": {"name": "setup", "duration": 1.4176207920000081, "outcome": "passed"}, "call": {"name": "call", "duration": 6.9075001249999985, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010649999998690873, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_galleries_desktop.py::TestGalleries::test_add_shemedia_prod", "duration": 9.566290376000012, "run_index": 13, "setup": {"name": "setup", "duration": 1.4396924170000034, "outcome": "passed"}, "call": {"name": "call", "duration": 6.686801292000013, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010424999999258944, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_gaming_desktop.py::TestGaming::test_open_url_stage", "duration": 9.809838248999966, "run_index": 14, "setup": {"name": "setup", "duration": 1.4278489159999879, "outcome": "passed"}, "call": {"name": "call", "duration": 6.954033750000008, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010666699998296281, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_gaming_desktop.py::TestGaming::test_open_url_prod", "duration": 9.73919675000002, "run_index": 15, "setup": {"name": "setup", "duration": 1.447112666999999, "outcome": "passed"}, "call": {"name": "call", "duration": 6.8448646660000065, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010675000001469925, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_gaming_desktop.py::TestGaming::test_title_stage", "duration": 9.676729333000026, "run_index": 16, "setup": {"name": "setup", "duration": 1.4355935830000135, "outcome": "passed"}, "call": {"name": "call", "duration": 6.805418207999992, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012395900000683469, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_gaming_desktop.py::TestGaming::test_title_prod", "duration": 9.991885499999995, "run_index": 17, "setup": {"name": "setup", "duration": 1.4269660829999964, "outcome": "passed"}, "call": {"name": "call", "duration": 7.13782441699999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012891700001205209, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_gaming_desktop.py::TestGaming::test_mosaic_area_stage", "duration": 9.743498251000005, "run_index": 18, "setup": {"name": "setup", "duration": 1.4451677920000066, "outcome": "passed"}, "call": {"name": "call", "duration": 6.8530410840000116, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012158299998077382, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_gaming_desktop.py::TestGaming::test_mosaic_area_prod", "duration": 19.37181533399996, "run_index": 19, "setup": {"name": "setup", "duration": 1.4289356669999904, "outcome": "passed"}, "call": {"name": "call", "duration": 16.51378137499998, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00016262500000152613, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_gaming_desktop.py::TestGaming::test_add_shemedia_stage", "duration": 9.426034665999993, "run_index": 20, "setup": {"name": "setup", "duration": 1.4518092499999966, "outcome": "passed"}, "call": {"name": "call", "duration": 6.522303749999992, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011241600000744256, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_gaming_desktop.py::TestGaming::test_add_shemedia_prod", "duration": 9.516478667000001, "run_index": 21, "setup": {"name": "setup", "duration": 1.444215000000014, "outcome": "passed"}, "call": {"name": "call", "duration": 6.627932207999976, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011645899999734866, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_main_desktop.py::TestMain::test_login_stage", "duration": 20.215152457999977, "run_index": 22, "setup": {"name": "setup", "duration": 1.4382857499999773, "outcome": "passed"}, "call": {"name": "call", "duration": 17.338464791000007, "outcome": "failed", "longrepr": "self = <pages.desktop.test_main_desktop.TestMain object at 0x107a6e550>, setup = None\n\n    def test_login_stage(self, setup):\n        try:\n            print(\"test_login STAGE\")\n>           self.selenium_test.sign_in(urls.main_stage)\n\ntest_main_desktop.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../global_functions.py:64: in sign_in\n    self.driver.find_element(By.CLASS_NAME, \"signIn\").click()\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x107b9a490>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <a class=\\\\\"signIn jqmify\\\\...sys.mjs:204:29\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <a class=\"signIn jqmify\" href=\"/user/login/\"> is not clickable at point (1293,19) because another element <div class=\"fc-dialog-overlay\"> obscures it\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:335:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:176:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:135:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:204:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException", "stdout": "test_login STAGE\nError al aceptar cookies: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n"}, "teardown": {"name": "teardown", "duration": 0.00011616700001582103, "outcome": "passed"}, "outcome": "failed"}, {"name": "test_main_desktop.py::TestMain::test_open_url_stage", "duration": 19.392716500000006, "run_index": 23, "setup": {"name": "setup", "duration": 1.4476650000000006, "outcome": "passed"}, "call": {"name": "call", "duration": 16.497264874999985, "outcome": "passed", "stdout": "test_open_url STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00012162500001977605, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_main_desktop.py::TestMain::test_title_stage", "duration": 9.875321914999972, "run_index": 24, "setup": {"name": "setup", "duration": 1.4521349159999772, "outcome": "passed"}, "call": {"name": "call", "duration": 6.970941707999998, "outcome": "passed", "stdout": "test_title STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00011037500001975786, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_main_desktop.py::TestMain::test_any_clip_stage", "duration": 29.610430749000045, "run_index": 25, "setup": {"name": "setup", "duration": 1.446486541000013, "outcome": "passed"}, "call": {"name": "call", "duration": 26.717334292000032, "outcome": "xfailed", "xfail_reason": "", "longrepr": "self = <pages.desktop.test_main_desktop.TestMain object at 0x107a6e9d0>, setup = None\n\n    @pytest.mark.xfail\n    def test_any_clip_stage(self, setup):\n        try:\n            print(\"test_any_clip STAGE\")\n>           self.selenium_test.search_ad_by_class_name(self.selenium_test.main_url(urls.main_stage), \"mediaWidget\")\n\ntest_main_desktop.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../global_functions.py:129: in search_ad_by_class_name\n    assert self.driver.find_element(By.CLASS_NAME, classname)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x107bcac10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .mediaWidget\",\"stac.../content/shared/webdriver/Errors.sys.mjs:509:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .mediaWidget; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException", "stdout": "test_any_clip STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00012337499998693602, "outcome": "passed"}, "outcome": "xfailed"}, {"name": "test_main_desktop.py::TestMain::test_she_ads_conditional_stage", "duration": 9.631590332999963, "run_index": 26, "setup": {"name": "setup", "duration": 1.401278624999975, "outcome": "passed"}, "call": {"name": "call", "duration": 6.828915541000015, "outcome": "passed", "stdout": "test_she_ads_conditional STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00011754199999813864, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_main_desktop.py::TestMain::test_login_prod", "duration": 19.871606500999974, "run_index": 27, "setup": {"name": "setup", "duration": 1.4314480419999995, "outcome": "passed"}, "call": {"name": "call", "duration": 17.008599249999975, "outcome": "failed", "longrepr": "self = <pages.desktop.test_main_desktop.TestMain object at 0x107a6ecd0>, setup = None\n\n    def test_login_prod(self, setup):\n        try:\n            print(\"test_login PROD\")\n>           self.selenium_test.sign_in(urls.main_prod)\n\ntest_main_desktop.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../global_functions.py:64: in sign_in\n    self.driver.find_element(By.CLASS_NAME, \"signIn\").click()\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x107bc9a30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <a class=\\\\\"signIn jqmify\\\\...sys.mjs:204:29\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <a class=\"signIn jqmify\" href=\"/user/login/\"> is not clickable at point (1293,19) because another element <div class=\"fc-dialog-overlay\"> obscures it\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:335:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:176:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:135:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:204:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException", "stdout": "test_login PROD\nError al aceptar cookies: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n"}, "teardown": {"name": "teardown", "duration": 0.00011116700000002311, "outcome": "passed"}, "outcome": "failed"}, {"name": "test_main_desktop.py::TestMain::test_open_url_prod", "duration": 10.535345167999992, "run_index": 28, "setup": {"name": "setup", "duration": 1.4591721670000197, "outcome": "passed"}, "call": {"name": "call", "duration": 7.616872791999981, "outcome": "passed", "stdout": "test_open_url PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00012804199997162868, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_main_desktop.py::TestMain::test_title_prod", "duration": 9.232778583000083, "run_index": 29, "setup": {"name": "setup", "duration": 1.4512821250000343, "outcome": "passed"}, "call": {"name": "call", "duration": 6.330084083000031, "outcome": "passed", "stdout": "test_title PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00013024999998378917, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_main_desktop.py::TestMain::test_any_clip_prod", "duration": 29.70998841599993, "run_index": 30, "setup": {"name": "setup", "duration": 1.4512409579999712, "outcome": "passed"}, "call": {"name": "call", "duration": 26.80738679199999, "outcome": "xfailed", "xfail_reason": "", "longrepr": "self = <pages.desktop.test_main_desktop.TestMain object at 0x107a6e4c0>, setup = None\n\n    @pytest.mark.xfail\n    def test_any_clip_prod(self, setup):\n        try:\n            print(\"test_any_clip PROD\")\n>           self.selenium_test.search_ad_by_class_name(self.selenium_test.main_url(urls.main_prod), \"mediaWidget\")\n\ntest_main_desktop.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../global_functions.py:129: in search_ad_by_class_name\n    assert self.driver.find_element(By.CLASS_NAME, classname)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x11719c610>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .mediaWidget\",\"stac.../content/shared/webdriver/Errors.sys.mjs:509:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .mediaWidget; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException", "stdout": "test_any_clip PROD\n"}, "teardown": {"name": "teardown", "duration": 0.0001197079999997186, "outcome": "passed"}, "outcome": "xfailed"}, {"name": "test_main_desktop.py::TestMain::test_she_ads_conditional_prod", "duration": 9.352412709999953, "run_index": 31, "setup": {"name": "setup", "duration": 1.4322106669999926, "outcome": "passed"}, "call": {"name": "call", "duration": 6.487878083999988, "outcome": "passed", "stdout": "test_she_ads_conditional PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00011329199998044714, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_newest_desktop.py::TestNewest::test_open_url_stage", "duration": 10.016057707999948, "run_index": 32, "setup": {"name": "setup", "duration": 1.4444931659999725, "outcome": "passed"}, "call": {"name": "call", "duration": 7.126963208999996, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010816700000759738, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_newest_desktop.py::TestNewest::test_title_stage", "duration": 9.459494833000008, "run_index": 33, "setup": {"name": "setup", "duration": 1.454854375000025, "outcome": "passed"}, "call": {"name": "call", "duration": 6.549671999999987, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011408299997128779, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_newest_desktop.py::TestNewest::test_open_url_prod", "duration": 9.309309707999944, "run_index": 34, "setup": {"name": "setup", "duration": 1.4503662919999556, "outcome": "passed"}, "call": {"name": "call", "duration": 6.408466583000006, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011054100002638734, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_newest_desktop.py::TestNewest::test_title_prod", "duration": 9.531628500999943, "run_index": 35, "setup": {"name": "setup", "duration": 1.456463833999976, "outcome": "passed"}, "call": {"name": "call", "duration": 6.618585666999991, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011516600000049948, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_newest_desktop.py::TestNewest::test_add_shemedia_stage", "duration": 9.658576873999891, "run_index": 36, "setup": {"name": "setup", "duration": 1.4636092909999547, "outcome": "passed"}, "call": {"name": "call", "duration": 6.731250499999987, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010779199999433331, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_newest_desktop.py::TestNewest::test_add_shemedia_prod", "duration": 18.258929584000043, "run_index": 37, "setup": {"name": "setup", "duration": 1.4512068750000253, "outcome": "passed"}, "call": {"name": "call", "duration": 15.356401333999997, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011449999999513238, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_popular_desktop.py::TestPopular::test_open_url_stage", "duration": 9.804704668, "run_index": 38, "setup": {"name": "setup", "duration": 1.4930047089999903, "outcome": "passed"}, "call": {"name": "call", "duration": 6.818578625000043, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011662499997555642, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_popular_desktop.py::TestPopular::test_open_url_prod", "duration": 9.734448000999976, "run_index": 39, "setup": {"name": "setup", "duration": 1.4471029169999952, "outcome": "passed"}, "call": {"name": "call", "duration": 6.840123457999994, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011870899999166795, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_popular_desktop.py::TestPopular::test_title_prod", "duration": 9.484509124999931, "run_index": 40, "setup": {"name": "setup", "duration": 1.4420022919999838, "outcome": "passed"}, "call": {"name": "call", "duration": 6.600394875000006, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010966599995754223, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_popular_desktop.py::TestPopular::test_title_stage", "duration": 9.12274700100005, "run_index": 41, "setup": {"name": "setup", "duration": 1.4320743339999922, "outcome": "passed"}, "call": {"name": "call", "duration": 6.258472833000042, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012550000002420347, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_popular_desktop.py::TestPopular::test_add_shemedia_stage", "duration": 17.904713875000027, "run_index": 42, "setup": {"name": "setup", "duration": 1.440563083000029, "outcome": "passed"}, "call": {"name": "call", "duration": 15.023446791999959, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001409170000101767, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_popular_desktop.py::TestPopular::test_add_shemedia_prod", "duration": 10.860550290999981, "run_index": 43, "setup": {"name": "setup", "duration": 1.476406333, "outcome": "passed"}, "call": {"name": "call", "duration": 7.907618124999999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001194999999825086, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_upload_desktop.py::TestUpload::test_video_youtube_stage", "duration": 0.0002290819999757332, "run_index": 44, "setup": {"name": "setup", "duration": 8.641599998782112e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 12, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 5.625000000009095e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "test_upload_desktop.py::TestUpload::test_video_twitter_stage", "duration": 0.00018437400001403148, "run_index": 45, "setup": {"name": "setup", "duration": 6.295800000089002e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 22, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 5.845800001225143e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "test_upload_desktop.py::TestUpload::test_video_tik_tok_stage", "duration": 0.00016275099994800257, "run_index": 46, "setup": {"name": "setup", "duration": 5.6541999981618574e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 32, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 4.9666999984765425e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "test_upload_desktop.py::TestUpload::test_video_instagram_stage", "duration": 0.00015162400001145215, "run_index": 47, "setup": {"name": "setup", "duration": 5.070800000339659e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 42, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 5.020800000465897e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "test_videos_desktop.py::TestVideos::test_open_url_stage", "duration": 9.667481832000078, "run_index": 48, "setup": {"name": "setup", "duration": 1.438510708000024, "outcome": "passed"}, "call": {"name": "call", "duration": 6.790352083000016, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010833300001422685, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_videos_desktop.py::TestVideos::test_open_url_prod", "duration": 9.472228582000014, "run_index": 49, "setup": {"name": "setup", "duration": 1.4605765829999768, "outcome": "passed"}, "call": {"name": "call", "duration": 6.550968000000012, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010741600004848806, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_videos_desktop.py::TestVideos::test_title_stage", "duration": 9.594577791999995, "run_index": 50, "setup": {"name": "setup", "duration": 1.4642744999999877, "outcome": "passed"}, "call": {"name": "call", "duration": 6.665909458999977, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011933300004329794, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_videos_desktop.py::TestVideos::test_title_prod", "duration": 9.519041625999932, "run_index": 51, "setup": {"name": "setup", "duration": 1.4494669169999952, "outcome": "passed"}, "call": {"name": "call", "duration": 6.619991209000034, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011658299990813248, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_videos_desktop.py::TestVideos::test_add_shemedia_stage", "duration": 9.517490623999947, "run_index": 52, "setup": {"name": "setup", "duration": 1.4285103329999629, "outcome": "passed"}, "call": {"name": "call", "duration": 6.660348417000023, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012154099999861501, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_videos_desktop.py::TestVideos::test_add_shemedia_prod", "duration": 9.159895499999834, "run_index": 53, "setup": {"name": "setup", "duration": 1.4400569999999107, "outcome": "passed"}, "call": {"name": "call", "duration": 6.279297375000056, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0004841249999572028, "outcome": "passed"}, "outcome": "passed"}], "summary": {"passed": 46, "failed": 2, "xfailed": 2, "skipped": 4, "num_tests": 54, "duration": 531.3030271530151}, "created_at": "2024-02-19 12:26:14.102349"}}