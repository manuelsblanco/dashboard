{"report": {"environment": {"Python": "3.9.6", "Platform": "macOS-14.5-arm64-arm-64bit"}, "tests": [{"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_open_url_stage", "duration": 0.6111700420000001, "run_index": 0, "setup": {"name": "setup", "duration": 0.305512125, "outcome": "error", "longrepr": "self = <pages.desktop.test_articles_desktop.TestArticles object at 0x1156ae670>\n\n    @pytest.fixture\n    def setup(self):\n>       self.selenium_test = SeleniumTest()\n\npages/desktop/test_articles_desktop.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/global_functions.py:23: in __init__\n    self.driver = webdriver.Firefox(options=self.firefox_options)\n/Library/Python/3.9/site-packages/selenium/webdriver/firefox/webdriver.py:67: in __init__\n    super().__init__(command_executor=executor, options=options)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:205: in __init__\n    self.start_session(capabilities)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:289: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1156e3d60>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"Process unexpectedly closed with status 0\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status 0\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException"}, "teardown": {"name": "teardown", "duration": 0.00014579200000008896, "outcome": "passed"}, "outcome": "error"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_open_url_prod", "duration": 28.952163541999997, "run_index": 1, "setup": {"name": "setup", "duration": 4.6797355419999995, "outcome": "passed"}, "call": {"name": "call", "duration": 19.592576792, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001156659999992371, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_title_stage", "duration": 47.214963417, "run_index": 2, "setup": {"name": "setup", "duration": 1.4377771250000002, "outcome": "passed"}, "call": {"name": "call", "duration": 44.339178917, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00023025000000131968, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_title_prod", "duration": 64.55268462499997, "run_index": 3, "setup": {"name": "setup", "duration": 1.5262821669999909, "outcome": "passed"}, "call": {"name": "call", "duration": 61.49990924999999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0002110410000000229, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_mosaic_area_stage", "duration": 38.326160082, "run_index": 4, "setup": {"name": "setup", "duration": 1.4733874579999906, "outcome": "passed"}, "call": {"name": "call", "duration": 35.379250583000015, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001345830000047954, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_mosaic_area_prod", "duration": 41.03071558300002, "run_index": 5, "setup": {"name": "setup", "duration": 1.4615199579999967, "outcome": "passed"}, "call": {"name": "call", "duration": 38.10749025000001, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018541700001151185, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_add_shemedia_stage", "duration": 21.916351708999997, "run_index": 6, "setup": {"name": "setup", "duration": 1.4924165840000114, "outcome": "passed"}, "call": {"name": "call", "duration": 18.93138349999998, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001350409999929525, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_add_shemedia_prod", "duration": 20.207590667000034, "run_index": 7, "setup": {"name": "setup", "duration": 1.465441750000025, "outcome": "passed"}, "call": {"name": "call", "duration": 17.276590916999993, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011624999999071406, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_open_url_stage", "duration": 18.63573491599996, "run_index": 8, "setup": {"name": "setup", "duration": 1.5055612499999995, "outcome": "passed"}, "call": {"name": "call", "duration": 15.62449424999997, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011816599999292521, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_open_url_prod", "duration": 229.30162221100005, "run_index": 9, "setup": {"name": "setup", "duration": 1.4337910840000063, "outcome": "passed"}, "call": {"name": "call", "duration": 226.433856084, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001839590000258795, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_title_stage", "duration": 45.56338000000005, "run_index": 10, "setup": {"name": "setup", "duration": 1.4230686669999955, "outcome": "passed"}, "call": {"name": "call", "duration": 42.717125500000066, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011716599999544997, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_title_prod", "duration": 46.46889287599993, "run_index": 11, "setup": {"name": "setup", "duration": 1.4004929999999831, "outcome": "passed"}, "call": {"name": "call", "duration": 43.66779466699995, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011220900000807887, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_add_shemedia_stage", "duration": 63.67504400099983, "run_index": 12, "setup": {"name": "setup", "duration": 1.4480056669999612, "outcome": "passed"}, "call": {"name": "call", "duration": 60.77893166699994, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010099999997237319, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_add_shemedia_prod", "duration": 18.018234790999827, "run_index": 13, "setup": {"name": "setup", "duration": 1.4305881249999857, "outcome": "passed"}, "call": {"name": "call", "duration": 15.156946957999935, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011158299992075627, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_open_url_stage", "duration": 30.173587124999926, "run_index": 14, "setup": {"name": "setup", "duration": 1.4248879169999782, "outcome": "passed"}, "call": {"name": "call", "duration": 27.32370254099999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010874999998122803, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_open_url_prod", "duration": 19.78436058400007, "run_index": 15, "setup": {"name": "setup", "duration": 1.4325410000000147, "outcome": "passed"}, "call": {"name": "call", "duration": 16.9191505, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012808400003905263, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_title_stage", "duration": 20.10338333399966, "run_index": 16, "setup": {"name": "setup", "duration": 1.4566192499999033, "outcome": "passed"}, "call": {"name": "call", "duration": 17.190014749999932, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00013008399992031627, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_title_prod", "duration": 44.25438687600001, "run_index": 17, "setup": {"name": "setup", "duration": 1.404691875000026, "outcome": "passed"}, "call": {"name": "call", "duration": 41.44489970899997, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010341699999116827, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_mosaic_area_stage", "duration": 60.20127729100011, "run_index": 18, "setup": {"name": "setup", "duration": 1.424977666000018, "outcome": "passed"}, "call": {"name": "call", "duration": 57.35121545900006, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010650000001533044, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_mosaic_area_prod", "duration": 41.57160366599999, "run_index": 19, "setup": {"name": "setup", "duration": 1.4226551250000057, "outcome": "passed"}, "call": {"name": "call", "duration": 38.726100083000006, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00019333299997015274, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_add_shemedia_stage", "duration": 30.091308082999944, "run_index": 20, "setup": {"name": "setup", "duration": 1.4473028749999912, "outcome": "passed"}, "call": {"name": "call", "duration": 27.196592957999997, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001093749999654392, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_add_shemedia_prod", "duration": 20.513207289000093, "run_index": 21, "setup": {"name": "setup", "duration": 1.407931291000068, "outcome": "passed"}, "call": {"name": "call", "duration": 17.697200791, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00014391599995633442, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_login_stage", "duration": 35.63658895799995, "run_index": 22, "setup": {"name": "setup", "duration": 1.4158919169999535, "outcome": "passed"}, "call": {"name": "call", "duration": 32.80469429100003, "outcome": "passed", "stdout": "test_login STAGE\nError al aceptar cookies: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n"}, "teardown": {"name": "teardown", "duration": 0.00011083300000791496, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_open_url_stage", "duration": 19.430357210000125, "run_index": 23, "setup": {"name": "setup", "duration": 1.4078178340000704, "outcome": "passed"}, "call": {"name": "call", "duration": 16.614617124999995, "outcome": "passed", "stdout": "test_open_url STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00010441699998864351, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_title_stage", "duration": 17.534491790999937, "run_index": 24, "setup": {"name": "setup", "duration": 1.4145597499999667, "outcome": "passed"}, "call": {"name": "call", "duration": 14.705263707999961, "outcome": "passed", "stdout": "test_title STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00010858300004201737, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_any_clip_stage", "duration": 41.9870021659998, "run_index": 25, "setup": {"name": "setup", "duration": 1.386444749999896, "outcome": "passed"}, "call": {"name": "call", "duration": 39.213968375000036, "outcome": "xfailed", "xfail_reason": "", "longrepr": "self = <pages.desktop.test_main_desktop.TestMain object at 0x1156d7280>, setup = None\n\n    @pytest.mark.xfail\n    def test_any_clip_stage(self, setup):\n        try:\n            print(\"test_any_clip STAGE\")\n>           self.selenium_test.search_ad_by_class_name(self.selenium_test.main_url(urls.main_stage), \"mediaWidget\")\n\npages/desktop/test_main_desktop.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/global_functions.py:135: in search_ad_by_class_name\n    assert self.driver.find_element(By.CLASS_NAME, classname)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x11611e250>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .mediaWidget\",\"stac.../content/shared/webdriver/Errors.sys.mjs:511:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .mediaWidget; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException", "stdout": "test_any_clip STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.0001442909999695985, "outcome": "passed"}, "outcome": "xfailed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_she_ads_conditional_stage", "duration": 17.542116582999824, "run_index": 26, "setup": {"name": "setup", "duration": 1.4171812079998745, "outcome": "passed"}, "call": {"name": "call", "duration": 14.70763987500004, "outcome": "passed", "stdout": "test_she_ads_conditional STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.0001142920000347658, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_login_prod", "duration": 43.00548029100037, "run_index": 27, "setup": {"name": "setup", "duration": 1.4072117080002045, "outcome": "passed"}, "call": {"name": "call", "duration": 40.19094162500005, "outcome": "passed", "stdout": "test_login PROD\nError al aceptar cookies: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n"}, "teardown": {"name": "teardown", "duration": 0.00011524999990797369, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_open_url_prod", "duration": 24.890493248999974, "run_index": 28, "setup": {"name": "setup", "duration": 1.4434526249999635, "outcome": "passed"}, "call": {"name": "call", "duration": 22.003483208000034, "outcome": "passed", "stdout": "test_open_url PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00010479100001248298, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_title_prod", "duration": 20.94995612699995, "run_index": 29, "setup": {"name": "setup", "duration": 1.4122597919999862, "outcome": "passed"}, "call": {"name": "call", "duration": 18.12532933400007, "outcome": "passed", "stdout": "test_title PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00010720899990701582, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_any_clip_prod", "duration": 63.01923183300005, "run_index": 30, "setup": {"name": "setup", "duration": 1.4335721669999657, "outcome": "passed"}, "call": {"name": "call", "duration": 60.15191845800018, "outcome": "xfailed", "xfail_reason": "", "longrepr": "self = <pages.desktop.test_main_desktop.TestMain object at 0x1156d7a00>, setup = None\n\n    @pytest.mark.xfail\n    def test_any_clip_prod(self, setup):\n        try:\n            print(\"test_any_clip PROD\")\n>           self.selenium_test.search_ad_by_class_name(self.selenium_test.main_url(urls.main_prod), \"mediaWidget\")\n\npages/desktop/test_main_desktop.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/global_functions.py:135: in search_ad_by_class_name\n    assert self.driver.find_element(By.CLASS_NAME, classname)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x116105370>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .mediaWidget\",\"stac.../content/shared/webdriver/Errors.sys.mjs:511:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .mediaWidget; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException", "stdout": "test_any_clip PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00016904099993553245, "outcome": "passed"}, "outcome": "xfailed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_she_ads_conditional_prod", "duration": 303.7909423320002, "run_index": 31, "setup": {"name": "setup", "duration": 1.4339883330001157, "outcome": "passed"}, "call": {"name": "call", "duration": 300.922815958, "outcome": "failed", "longrepr": "self = <pages.desktop.test_main_desktop.TestMain object at 0x1156d7b80>, setup = None\n\n    def test_she_ads_conditional_prod(self, setup):\n        try:\n            print(\"test_she_ads_conditional PROD\")\n>           self.selenium_test.search_ad_by_class_name(self.selenium_test.main_url(urls.main_prod), \"mediumRect\")\n\npages/desktop/test_main_desktop.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/global_functions.py:131: in search_ad_by_class_name\n    self.open_url_maximize(self.main_url(url))\npages/global_functions.py:96: in open_url_maximize\n    self.driver.get(url)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:353: in get\n    self.execute(Command.GET, {\"url\": url})\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x116127610>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"Navigation timed out after 300000 ms\",\"stacktrace\":\"R...ote/content/shared/webdriver/Errors.sys.mjs:740:5\\\\nbail@chrome://remote/content/marionette/sync.sys.mjs:211:19\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: Navigation timed out after 300000 ms\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       TimeoutError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:740:5\nE       bail@chrome://remote/content/marionette/sync.sys.mjs:211:19\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException", "stdout": "test_she_ads_conditional PROD\n"}, "teardown": {"name": "teardown", "duration": 0.0001497079999808193, "outcome": "passed"}, "outcome": "failed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_open_url_stage", "duration": 20.93562716800011, "run_index": 32, "setup": {"name": "setup", "duration": 1.4639727090000179, "outcome": "passed"}, "call": {"name": "call", "duration": 18.007571374999998, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011037500007660128, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_title_stage", "duration": 42.92263920900018, "run_index": 33, "setup": {"name": "setup", "duration": 1.4609936670001389, "outcome": "passed"}, "call": {"name": "call", "duration": 40.00054166599989, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011020900001312839, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_open_url_prod", "duration": 19.4841974579997, "run_index": 34, "setup": {"name": "setup", "duration": 1.462885124999957, "outcome": "passed"}, "call": {"name": "call", "duration": 16.558318124999914, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010908299987022474, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_title_prod", "duration": 16.95404729200004, "run_index": 35, "setup": {"name": "setup", "duration": 1.456510875000049, "outcome": "passed"}, "call": {"name": "call", "duration": 14.040893958999959, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00013158299998394796, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_add_shemedia_stage", "duration": 19.556852875999766, "run_index": 36, "setup": {"name": "setup", "duration": 1.3970470419999401, "outcome": "passed"}, "call": {"name": "call", "duration": 16.762646292, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011249999988649506, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_add_shemedia_prod", "duration": 46.919031041999915, "run_index": 37, "setup": {"name": "setup", "duration": 1.4445393749999766, "outcome": "passed"}, "call": {"name": "call", "duration": 44.02982924999992, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001230420000410959, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_open_url_stage", "duration": 20.71770654099987, "run_index": 38, "setup": {"name": "setup", "duration": 1.4450566660000277, "outcome": "passed"}, "call": {"name": "call", "duration": 17.82748754199997, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010566699984337902, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_open_url_prod", "duration": 46.96914716699962, "run_index": 39, "setup": {"name": "setup", "duration": 1.4033791249999013, "outcome": "passed"}, "call": {"name": "call", "duration": 44.16225237499998, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001365419998364814, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_title_prod", "duration": 18.91651437300061, "run_index": 40, "setup": {"name": "setup", "duration": 1.4491997910001828, "outcome": "passed"}, "call": {"name": "call", "duration": 16.01799600000004, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011879100020451006, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_title_stage", "duration": 58.16764983400026, "run_index": 41, "setup": {"name": "setup", "duration": 1.41321612500019, "outcome": "passed"}, "call": {"name": "call", "duration": 55.341101166999806, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011641700007203326, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_add_shemedia_stage", "duration": 24.278150582000308, "run_index": 42, "setup": {"name": "setup", "duration": 1.4454956660001699, "outcome": "passed"}, "call": {"name": "call", "duration": 21.387047500000108, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011174999985996692, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_add_shemedia_prod", "duration": 19.875975001999905, "run_index": 43, "setup": {"name": "setup", "duration": 1.4868468340000618, "outcome": "passed"}, "call": {"name": "call", "duration": 16.902145208999855, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00013612499992632365, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_youtube_stage", "duration": 0.00024954199989224435, "run_index": 44, "setup": {"name": "setup", "duration": 9.849999992184166e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 12, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 5.254200004856102e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_twitter_stage", "duration": 0.0001642490001358965, "run_index": 45, "setup": {"name": "setup", "duration": 5.5707999990772805e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 22, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 5.2833000154350884e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_tik_tok_stage", "duration": 0.00016487600009895687, "run_index": 46, "setup": {"name": "setup", "duration": 5.883400012862694e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 32, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 4.7207999841702986e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_instagram_stage", "duration": 0.0002097929998399195, "run_index": 47, "setup": {"name": "setup", "duration": 5.4583999826718355e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 42, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 0.0001006250001864828, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_open_url_stage", "duration": 45.63738095800022, "run_index": 48, "setup": {"name": "setup", "duration": 1.4793877080001039, "outcome": "passed"}, "call": {"name": "call", "duration": 42.67850199999998, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010354200003348524, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_open_url_prod", "duration": 45.425536251000494, "run_index": 49, "setup": {"name": "setup", "duration": 1.4530443340001966, "outcome": "passed"}, "call": {"name": "call", "duration": 42.519318999999996, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012858300010520907, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_title_stage", "duration": 22.526612375000013, "run_index": 50, "setup": {"name": "setup", "duration": 1.443553583000039, "outcome": "passed"}, "call": {"name": "call", "duration": 19.63937445900001, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00013074999992568337, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_title_prod", "duration": 19.74174808199996, "run_index": 51, "setup": {"name": "setup", "duration": 1.4754448329999832, "outcome": "passed"}, "call": {"name": "call", "duration": 16.790755708000006, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010270799998579605, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_add_shemedia_stage", "duration": 19.215675707999935, "run_index": 52, "setup": {"name": "setup", "duration": 1.4310150829999202, "outcome": "passed"}, "call": {"name": "call", "duration": 16.353498041999956, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00014750000013918907, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_add_shemedia_prod", "duration": 22.300378707999926, "run_index": 53, "setup": {"name": "setup", "duration": 1.8389422499999455, "outcome": "passed"}, "call": {"name": "call", "duration": 18.62237812500007, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011608299996623828, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/mobile/test_main_mobile.py::TestMain::test_login_stage", "duration": 0.0005762499997672421, "run_index": 54, "setup": {"name": "setup", "duration": 8.687499985171598e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/mobile/test_main_mobile.py', 13, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 0.00040250000006381015, "outcome": "passed"}, "outcome": "skipped"}], "summary": {"error": 1, "passed": 46, "xfailed": 2, "failed": 1, "skipped": 5, "num_tests": 55, "duration": 2083.1335430145264}, "created_at": "2024-05-31 14:56:39.253734"}}