{"report": {"environment": {"Python": "3.9.6", "Platform": "macOS-14.3-arm64-arm-64bit"}, "tests": [{"name": "desktop/test_articles_desktop.py::TestArticles::test_open_url_stage", "duration": 39.263902376, "run_index": 0, "setup": {"name": "setup", "duration": 2.788169542, "outcome": "passed"}, "call": {"name": "call", "duration": 33.687437583, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012570900000241636, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_articles_desktop.py::TestArticles::test_open_url_prod", "duration": 21.907644584000003, "run_index": 1, "setup": {"name": "setup", "duration": 1.6681046670000015, "outcome": "passed"}, "call": {"name": "call", "duration": 18.571344042, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.12080000006199e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_articles_desktop.py::TestArticles::test_title_stage", "duration": 22.849846500000005, "run_index": 2, "setup": {"name": "setup", "duration": 1.6387496250000027, "outcome": "passed"}, "call": {"name": "call", "duration": 19.572229625, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011762500000145337, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_articles_desktop.py::TestArticles::test_title_prod", "duration": 137.63112045699998, "run_index": 3, "setup": {"name": "setup", "duration": 57.69429358299999, "outcome": "passed"}, "call": {"name": "call", "duration": 22.242437999999993, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.529100000804647e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_articles_desktop.py::TestArticles::test_mosaic_area_stage", "duration": 21.333085459000046, "run_index": 4, "setup": {"name": "setup", "duration": 1.5879836670000032, "outcome": "passed"}, "call": {"name": "call", "duration": 18.157009792000025, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010833300001422685, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_articles_desktop.py::TestArticles::test_mosaic_area_prod", "duration": 34.484822709000014, "run_index": 5, "setup": {"name": "setup", "duration": 1.580824917000001, "outcome": "passed"}, "call": {"name": "call", "duration": 31.32305525000001, "outcome": "failed", "longrepr": "self = <pages.desktop.test_articles_desktop.TestArticles object at 0x1077619d0>, setup = None\n\n    def test_mosaic_area_prod(self, setup):\n        try:\n>           self.selenium_test.mosaic_area(self.selenium_test.main_url(urls.articles_prod), \"mosaicArea\", \"prod\")\n\ndesktop/test_articles_desktop.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.global_functions.SeleniumTest object at 0x120b98ca0>, page = 'https://www.ebaumsworld.com/articles/'\nclassname = 'mosaicArea', environment = 'prod'\n\n    def mosaic_area(self, page: str, classname: str, environment: str):\n        links = []\n    \n        if environment == \"stage\":\n            self.open_url(page)\n            self.assert_mosaic(classname)\n    \n        elif environment == \"prod\":\n            self.open_url(page)\n            self.assert_mosaic(classname)\n    \n            try:\n                wait = WebDriverWait(self.driver, 5)\n                element = wait.until(EC.element_to_be_clickable((By.ID, \"pmc-atlasmg-adhesion-close\")))\n                element.click()\n            except TimeoutException:\n                pass\n    \n            links.append(self.driver.find_element(By.ID, \"bigMosaicLink\").get_attribute(\"href\"))\n            for i in range(1, 5):\n                links.append(self.driver.find_element(By.ID, f\"smallMosaicLink-{i}\").get_attribute(\"href\"))\n    \n            actions = ActionChains(self.driver)\n            for i in range(len(links) - 1):\n                actions.key_down(Keys.COMMAND).click(\n                    self.driver.find_element(By.ID, f\"smallMosaicLink-{i + 1}\")).key_up(Keys.COMMAND)\n            actions.key_down(Keys.COMMAND).click(self.driver.find_element(By.ID, \"bigMosaicLink\")).key_up(Keys.COMMAND)\n            actions.perform()\n            time.sleep(3)\n    \n            for i in range(1, min(len(links) + 1, len(self.driver.window_handles))):\n                self.driver.switch_to.window(self.driver.window_handles[i])\n                time.sleep(2)\n>               assert self.driver.current_url in links\nE               AssertionError\n\nglobal_functions.py:208: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00011762500000145337, "outcome": "passed"}, "outcome": "failed"}, {"name": "desktop/test_articles_desktop.py::TestArticles::test_add_shemedia_stage", "duration": 28.994032543000003, "run_index": 6, "setup": {"name": "setup", "duration": 1.6106976670000108, "outcome": "passed"}, "call": {"name": "call", "duration": 25.77254099999999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.620899999163157e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_articles_desktop.py::TestArticles::test_add_shemedia_prod", "duration": 22.595012376999932, "run_index": 7, "setup": {"name": "setup", "duration": 1.6140823339999884, "outcome": "passed"}, "call": {"name": "call", "duration": 19.366750583999988, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.712499996794577e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_galleries_desktop.py::TestGalleries::test_open_url_stage", "duration": 32.219116584999995, "run_index": 8, "setup": {"name": "setup", "duration": 1.5810283339999955, "outcome": "passed"}, "call": {"name": "call", "duration": 29.056933749999985, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012616700001899517, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_galleries_desktop.py::TestGalleries::test_open_url_prod", "duration": 25.064372375000005, "run_index": 9, "setup": {"name": "setup", "duration": 1.563051250000001, "outcome": "passed"}, "call": {"name": "call", "duration": 21.938162457999965, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010741700003791266, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_galleries_desktop.py::TestGalleries::test_title_stage", "duration": 22.963880167000013, "run_index": 10, "setup": {"name": "setup", "duration": 1.5861668750000035, "outcome": "passed"}, "call": {"name": "call", "duration": 19.791434625000022, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011179199998423428, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_galleries_desktop.py::TestGalleries::test_title_prod", "duration": 21.841976915999908, "run_index": 11, "setup": {"name": "setup", "duration": 1.6089914159999807, "outcome": "passed"}, "call": {"name": "call", "duration": 18.623871208999958, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001228749999881984, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_galleries_desktop.py::TestGalleries::test_add_shemedia_stage", "duration": 22.87537529100007, "run_index": 12, "setup": {"name": "setup", "duration": 1.5754727080000066, "outcome": "passed"}, "call": {"name": "call", "duration": 19.72433541600003, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.44590000244716e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_galleries_desktop.py::TestGalleries::test_add_shemedia_prod", "duration": 19.45199229100001, "run_index": 13, "setup": {"name": "setup", "duration": 1.6250340830000027, "outcome": "passed"}, "call": {"name": "call", "duration": 16.201825499999984, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.862500002100205e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_gaming_desktop.py::TestGaming::test_open_url_stage", "duration": 31.266624581999963, "run_index": 14, "setup": {"name": "setup", "duration": 1.6461961659999815, "outcome": "passed"}, "call": {"name": "call", "duration": 27.974129333000008, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010291699999243065, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_gaming_desktop.py::TestGaming::test_open_url_prod", "duration": 21.999775500999988, "run_index": 15, "setup": {"name": "setup", "duration": 1.6154677499999934, "outcome": "passed"}, "call": {"name": "call", "duration": 18.768746792, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.320899999920584e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_gaming_desktop.py::TestGaming::test_title_stage", "duration": 21.23018050100012, "run_index": 16, "setup": {"name": "setup", "duration": 1.5644500420000327, "outcome": "passed"}, "call": {"name": "call", "duration": 18.10116987500004, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011054200001581194, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_gaming_desktop.py::TestGaming::test_title_prod", "duration": 24.061963126000023, "run_index": 17, "setup": {"name": "setup", "duration": 1.591017416999989, "outcome": "passed"}, "call": {"name": "call", "duration": 20.879837667000004, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.062500004120011e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_gaming_desktop.py::TestGaming::test_mosaic_area_stage", "duration": 20.934896749000018, "run_index": 18, "setup": {"name": "setup", "duration": 1.5517037500000015, "outcome": "passed"}, "call": {"name": "call", "duration": 17.831393416000026, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.58329999889429e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_gaming_desktop.py::TestGaming::test_mosaic_area_prod", "duration": 39.18289266599999, "run_index": 19, "setup": {"name": "setup", "duration": 1.584177082999986, "outcome": "passed"}, "call": {"name": "call", "duration": 36.014431417000026, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010708299998896109, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_gaming_desktop.py::TestGaming::test_add_shemedia_stage", "duration": 20.424503417999972, "run_index": 20, "setup": {"name": "setup", "duration": 1.6518538340000077, "outcome": "passed"}, "call": {"name": "call", "duration": 17.120702415999972, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.33339999846794e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_gaming_desktop.py::TestGaming::test_add_shemedia_prod", "duration": 20.38622404199998, "run_index": 21, "setup": {"name": "setup", "duration": 1.612497167000015, "outcome": "passed"}, "call": {"name": "call", "duration": 17.16112774999999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010195799995926791, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_login_stage", "duration": 78.23865583399993, "run_index": 22, "setup": {"name": "setup", "duration": 1.7365928749999284, "outcome": "passed"}, "call": {"name": "call", "duration": 74.76537116700001, "outcome": "passed", "stdout": "test_login STAGE\nError al aceptar cookies: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n"}, "teardown": {"name": "teardown", "duration": 9.89170000593731e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_open_url_stage", "duration": 23.303187669000067, "run_index": 23, "setup": {"name": "setup", "duration": 1.7074752089999947, "outcome": "passed"}, "call": {"name": "call", "duration": 19.88814479200005, "outcome": "passed", "stdout": "test_open_url STAGE\n"}, "teardown": {"name": "teardown", "duration": 9.245900002952112e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_title_stage", "duration": 21.21114029299997, "run_index": 24, "setup": {"name": "setup", "duration": 1.743570333999969, "outcome": "passed"}, "call": {"name": "call", "duration": 17.723907375000067, "outcome": "passed", "stdout": "test_title STAGE\n"}, "teardown": {"name": "teardown", "duration": 9.22499999660431e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_any_clip_stage", "duration": 39.96833004199982, "run_index": 25, "setup": {"name": "setup", "duration": 1.558647374999964, "outcome": "passed"}, "call": {"name": "call", "duration": 36.85091462499997, "outcome": "xfailed", "xfail_reason": "", "longrepr": "self = <pages.desktop.test_main_desktop.TestMain object at 0x116daef70>, setup = None\n\n    @pytest.mark.xfail\n    def test_any_clip_stage(self, setup):\n        try:\n            print(\"test_any_clip STAGE\")\n>           self.selenium_test.search_ad_by_class_name(self.selenium_test.main_url(urls.main_stage), \"mediaWidget\")\n\ndesktop/test_main_desktop.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nglobal_functions.py:127: in search_ad_by_class_name\n    assert self.driver.find_element(By.CLASS_NAME, classname)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x120c2ec40>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .mediaWidget\",\"stac.../content/shared/webdriver/Errors.sys.mjs:509:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .mediaWidget; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException", "stdout": "test_any_clip STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.0001206669999191945, "outcome": "passed"}, "outcome": "xfailed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_she_ads_conditional_stage", "duration": 22.50687666600004, "run_index": 26, "setup": {"name": "setup", "duration": 1.5980487909999965, "outcome": "passed"}, "call": {"name": "call", "duration": 19.310681292000027, "outcome": "passed", "stdout": "test_she_ads_conditional STAGE\n"}, "teardown": {"name": "teardown", "duration": 9.779200001958088e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_login_prod", "duration": 55.6051467919998, "run_index": 27, "setup": {"name": "setup", "duration": 1.5730992499999275, "outcome": "passed"}, "call": {"name": "call", "duration": 52.458851624999966, "outcome": "passed", "stdout": "test_login PROD\nError al aceptar cookies: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n"}, "teardown": {"name": "teardown", "duration": 9.666699997978867e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_open_url_prod", "duration": 22.780250292999995, "run_index": 28, "setup": {"name": "setup", "duration": 1.5932732090000172, "outcome": "passed"}, "call": {"name": "call", "duration": 19.59361124999998, "outcome": "passed", "stdout": "test_open_url PROD\n"}, "teardown": {"name": "teardown", "duration": 9.262499997930718e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_title_prod", "duration": 21.13417154000024, "run_index": 29, "setup": {"name": "setup", "duration": 1.5948278330000676, "outcome": "passed"}, "call": {"name": "call", "duration": 17.944420666000042, "outcome": "passed", "stdout": "test_title PROD\n"}, "teardown": {"name": "teardown", "duration": 9.520800006157515e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_any_clip_prod", "duration": 41.94725337700004, "run_index": 30, "setup": {"name": "setup", "duration": 1.5817782090000492, "outcome": "passed"}, "call": {"name": "call", "duration": 38.78354841700002, "outcome": "xfailed", "xfail_reason": "", "longrepr": "self = <pages.desktop.test_main_desktop.TestMain object at 0x116db9730>, setup = None\n\n    @pytest.mark.xfail\n    def test_any_clip_prod(self, setup):\n        try:\n            print(\"test_any_clip PROD\")\n>           self.selenium_test.search_ad_by_class_name(self.selenium_test.main_url(urls.main_prod), \"mediaWidget\")\n\ndesktop/test_main_desktop.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nglobal_functions.py:127: in search_ad_by_class_name\n    assert self.driver.find_element(By.CLASS_NAME, classname)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x120c5f310>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .mediaWidget\",\"stac.../content/shared/webdriver/Errors.sys.mjs:509:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .mediaWidget; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException", "stdout": "test_any_clip PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00014854199991987116, "outcome": "passed"}, "outcome": "xfailed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_she_ads_conditional_prod", "duration": 23.931143123000197, "run_index": 31, "setup": {"name": "setup", "duration": 1.5893497910000178, "outcome": "passed"}, "call": {"name": "call", "duration": 20.75234595800009, "outcome": "passed", "stdout": "test_she_ads_conditional PROD\n"}, "teardown": {"name": "teardown", "duration": 9.75830000697897e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_newest_desktop.py::TestNewest::test_open_url_stage", "duration": 58.64495549800006, "run_index": 32, "setup": {"name": "setup", "duration": 1.5982980830000315, "outcome": "passed"}, "call": {"name": "call", "duration": 55.44826454099996, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.479100003773056e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_newest_desktop.py::TestNewest::test_title_stage", "duration": 20.51772829200013, "run_index": 33, "setup": {"name": "setup", "duration": 1.5909101250000504, "outcome": "passed"}, "call": {"name": "call", "duration": 17.33580770900005, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001003329999775815, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_newest_desktop.py::TestNewest::test_open_url_prod", "duration": 21.435051790999864, "run_index": 34, "setup": {"name": "setup", "duration": 1.5888308329999745, "outcome": "passed"}, "call": {"name": "call", "duration": 18.25725049999994, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00013962499997433042, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_newest_desktop.py::TestNewest::test_title_prod", "duration": 27.392952250000008, "run_index": 35, "setup": {"name": "setup", "duration": 1.5923742499999207, "outcome": "passed"}, "call": {"name": "call", "duration": 24.208107917000007, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.583300015947316e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_newest_desktop.py::TestNewest::test_add_shemedia_stage", "duration": 20.877573084000232, "run_index": 36, "setup": {"name": "setup", "duration": 1.590252042000202, "outcome": "passed"}, "call": {"name": "call", "duration": 17.696973999999955, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.49999998738349e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_newest_desktop.py::TestNewest::test_add_shemedia_prod", "duration": 49.807861791999585, "run_index": 37, "setup": {"name": "setup", "duration": 1.5854971669998577, "outcome": "passed"}, "call": {"name": "call", "duration": 46.636768458000006, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.899999986373587e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_popular_desktop.py::TestPopular::test_open_url_stage", "duration": 21.684931833999826, "run_index": 38, "setup": {"name": "setup", "duration": 1.6059016669998982, "outcome": "passed"}, "call": {"name": "call", "duration": 18.47303229099998, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.620900004847499e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_popular_desktop.py::TestPopular::test_open_url_prod", "duration": 42.61749054300003, "run_index": 39, "setup": {"name": "setup", "duration": 1.5795149170000968, "outcome": "passed"}, "call": {"name": "call", "duration": 39.45835966699997, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010104199986926687, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_popular_desktop.py::TestPopular::test_title_prod", "duration": 27.343927208999958, "run_index": 40, "setup": {"name": "setup", "duration": 1.6030304999999316, "outcome": "passed"}, "call": {"name": "call", "duration": 24.137747292000086, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011891700000887795, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_popular_desktop.py::TestPopular::test_title_stage", "duration": 23.006881250000106, "run_index": 41, "setup": {"name": "setup", "duration": 1.6020932920000632, "outcome": "passed"}, "call": {"name": "call", "duration": 19.80259679100004, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.787499993763049e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_popular_desktop.py::TestPopular::test_add_shemedia_stage", "duration": 22.772574750999866, "run_index": 42, "setup": {"name": "setup", "duration": 1.5970959589999438, "outcome": "passed"}, "call": {"name": "call", "duration": 19.578289457999972, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.337500000583532e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_popular_desktop.py::TestPopular::test_add_shemedia_prod", "duration": 20.100004332999788, "run_index": 43, "setup": {"name": "setup", "duration": 1.6074970829999984, "outcome": "passed"}, "call": {"name": "call", "duration": 16.88491708399988, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.308299991062086e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_upload_desktop.py::TestUpload::test_video_youtube_stage", "duration": 0.00019749999978557753, "run_index": 44, "setup": {"name": "setup", "duration": 7.408299984490441e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 12, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 4.9334000095768715e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "desktop/test_upload_desktop.py::TestUpload::test_video_twitter_stage", "duration": 0.00014049799983695266, "run_index": 45, "setup": {"name": "setup", "duration": 4.8040999899967574e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 22, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 4.441600003701751e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "desktop/test_upload_desktop.py::TestUpload::test_video_tik_tok_stage", "duration": 0.0002888750002512097, "run_index": 46, "setup": {"name": "setup", "duration": 0.00012125000012019882, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 32, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 4.637500001081207e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "desktop/test_upload_desktop.py::TestUpload::test_video_instagram_stage", "duration": 0.0001405829998475383, "run_index": 47, "setup": {"name": "setup", "duration": 4.862499986302282e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 42, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 4.333300012149266e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "desktop/test_videos_desktop.py::TestVideos::test_open_url_stage", "duration": 30.911848790000477, "run_index": 48, "setup": {"name": "setup", "duration": 1.5985305830001835, "outcome": "passed"}, "call": {"name": "call", "duration": 27.71469770800013, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 8.991599997898447e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_videos_desktop.py::TestVideos::test_open_url_prod", "duration": 19.146438167000042, "run_index": 49, "setup": {"name": "setup", "duration": 1.661631166999996, "outcome": "passed"}, "call": {"name": "call", "duration": 15.82308450000005, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.133300000030431e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_videos_desktop.py::TestVideos::test_title_stage", "duration": 42.15717649999965, "run_index": 50, "setup": {"name": "setup", "duration": 1.5931422909998219, "outcome": "passed"}, "call": {"name": "call", "duration": 38.97079995900003, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.195899997394008e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_videos_desktop.py::TestVideos::test_title_prod", "duration": 20.26117750000003, "run_index": 51, "setup": {"name": "setup", "duration": 1.579064125000059, "outcome": "passed"}, "call": {"name": "call", "duration": 17.102957124999875, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.212500003741297e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_videos_desktop.py::TestVideos::test_add_shemedia_stage", "duration": 23.607815207000158, "run_index": 52, "setup": {"name": "setup", "duration": 1.5780815830000847, "outcome": "passed"}, "call": {"name": "call", "duration": 20.451557374999993, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.466599999541359e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_videos_desktop.py::TestVideos::test_add_shemedia_prod", "duration": 19.753754041000093, "run_index": 53, "setup": {"name": "setup", "duration": 1.5503562080000393, "outcome": "passed"}, "call": {"name": "call", "duration": 16.652939957999934, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010166700008085172, "outcome": "passed"}, "outcome": "passed"}, {"name": "mobile/test_main_mobile.py::TestMain::test_login_stage", "duration": 0.0005127909998918767, "run_index": 54, "setup": {"name": "setup", "duration": 7.583299998259463e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/mobile/test_main_mobile.py', 13, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 0.00036112499992668745, "outcome": "passed"}, "outcome": "skipped"}], "summary": {"passed": 47, "failed": 1, "xfailed": 2, "skipped": 5, "num_tests": 55, "duration": 1398.5185070037842}, "created_at": "2024-02-05 11:37:29.484560"}}