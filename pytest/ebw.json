{"report": {"environment": {"Python": "3.9.6", "Platform": "macOS-14.5-arm64-arm-64bit"}, "tests": [{"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_open_url_stage", "duration": 32.203412, "run_index": 0, "setup": {"name": "setup", "duration": 0.9773693330000001, "outcome": "passed"}, "call": {"name": "call", "duration": 30.248542667000002, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00013066699999697562, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_open_url_prod", "duration": 33.745447958, "run_index": 1, "setup": {"name": "setup", "duration": 1.5195071250000005, "outcome": "passed"}, "call": {"name": "call", "duration": 30.706303917, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012979099999910204, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_title_stage", "duration": 46.20194158399998, "run_index": 2, "setup": {"name": "setup", "duration": 1.5353955, "outcome": "passed"}, "call": {"name": "call", "duration": 43.131034666999994, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011591699998803051, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_title_prod", "duration": 44.24351162500001, "run_index": 3, "setup": {"name": "setup", "duration": 1.4184305830000028, "outcome": "passed"}, "call": {"name": "call", "duration": 41.406539499999994, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011095900001123482, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_mosaic_area_stage", "duration": 54.19143362400001, "run_index": 4, "setup": {"name": "setup", "duration": 1.4641484160000005, "outcome": "passed"}, "call": {"name": "call", "duration": 51.26302204199999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001147500000229229, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_mosaic_area_prod", "duration": 52.33406216599997, "run_index": 5, "setup": {"name": "setup", "duration": 1.4724398329999815, "outcome": "passed"}, "call": {"name": "call", "duration": 49.38905279100001, "outcome": "failed", "longrepr": "self = <pages.desktop.test_articles_desktop.TestArticles object at 0x111b6fbe0>, setup = None\n\n    def test_mosaic_area_prod(self, setup):\n        try:\n            for _ in range(3):\n>               if self.selenium_test.mosaic_area(self.selenium_test.main_url(urls.articles_prod), \"mosaicArea\",\n                                                  \"prod\"):\n\npages/desktop/test_articles_desktop.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.global_functions.SeleniumTest object at 0x111c68160>, page = 'https://www.ebaumsworld.com/articles/', classname = 'mosaicArea'\nenvironment = 'prod'\n\n    def mosaic_area(self, page: str, classname: str, environment: str):\n        links = []\n        links_id =[]\n    \n        if environment == \"stage\":\n            if self.open_url(page) and self.assert_mosaic(classname):\n                return True\n    \n        elif environment == \"prod\":\n            self.open_url(page)\n            self.assert_mosaic(classname)\n    \n            try:\n                wait = WebDriverWait(self.driver, 5)\n                element = wait.until(EC.element_to_be_clickable((By.ID, \"pmc-atlasmg-adhesion-close\")))\n                element.click()\n            except TimeoutException:\n                pass\n    \n            links.append(self.driver.find_element(By.ID, \"bigMosaicLink\").get_attribute(\"href\"))\n            for i in range(1, 5):\n                links.append(self.driver.find_element(By.ID, f\"smallMosaicLink-{i}\").get_attribute(\"href\"))\n    \n            actions = ActionChains(self.driver)\n            for i in range(len(links) - 1):\n                actions.key_down(Keys.COMMAND).click(\n                    self.driver.find_element(By.ID, f\"smallMosaicLink-{i + 1}\")).key_up(Keys.COMMAND)\n            actions.key_down(Keys.COMMAND).click(self.driver.find_element(By.ID, \"bigMosaicLink\")).key_up(Keys.COMMAND)\n            actions.perform()\n            time.sleep(3)\n    \n            for link in links:\n                links_id.append(link.split(\"/\")[-2])\n    \n            for i in range(1, min(len(links) + 1, len(self.driver.window_handles))):\n                self.driver.switch_to.window(self.driver.window_handles[i])\n                time.sleep(3)\n>               if self.driver.current_url.split(\"/\")[-2] not in links_id:\nE               IndexError: list index out of range\n\npages/global_functions.py:220: IndexError"}, "teardown": {"name": "teardown", "duration": 0.00012970899999231733, "outcome": "passed"}, "outcome": "failed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_add_shemedia_stage", "duration": 45.57726808399991, "run_index": 6, "setup": {"name": "setup", "duration": 1.475922249999968, "outcome": "passed"}, "call": {"name": "call", "duration": 42.62529479199998, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012879199999815683, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_add_shemedia_prod", "duration": 53.08740875099994, "run_index": 7, "setup": {"name": "setup", "duration": 1.447404583999969, "outcome": "passed"}, "call": {"name": "call", "duration": 50.19247687500001, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012270799999214432, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_open_url_stage", "duration": 46.61020354200002, "run_index": 8, "setup": {"name": "setup", "duration": 1.4725231250000093, "outcome": "passed"}, "call": {"name": "call", "duration": 43.66489604200001, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0002612499999941065, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_open_url_prod", "duration": 73.2915379179999, "run_index": 9, "setup": {"name": "setup", "duration": 1.5073229589999642, "outcome": "passed"}, "call": {"name": "call", "duration": 70.27674658299998, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001454169999988153, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_title_stage", "duration": 42.00751529099995, "run_index": 10, "setup": {"name": "setup", "duration": 1.484991832999981, "outcome": "passed"}, "call": {"name": "call", "duration": 39.03740283299999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012879199999815683, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_title_prod", "duration": 43.53632275099994, "run_index": 11, "setup": {"name": "setup", "duration": 1.4324885419999873, "outcome": "passed"}, "call": {"name": "call", "duration": 40.67120862499996, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001370420000057493, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_add_shemedia_stage", "duration": 41.91588850000005, "run_index": 12, "setup": {"name": "setup", "duration": 1.4406587500000114, "outcome": "passed"}, "call": {"name": "call", "duration": 39.02773675000003, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.006834249999997155, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_add_shemedia_prod", "duration": 31.106795916999886, "run_index": 13, "setup": {"name": "setup", "duration": 1.4521419999999807, "outcome": "passed"}, "call": {"name": "call", "duration": 28.202399124999943, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011279199998170952, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_open_url_stage", "duration": 54.05896812499998, "run_index": 14, "setup": {"name": "setup", "duration": 1.4420088749999422, "outcome": "passed"}, "call": {"name": "call", "duration": 51.17482737500006, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012300000003051537, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_open_url_prod", "duration": 22.409305498000208, "run_index": 15, "setup": {"name": "setup", "duration": 1.4304324580000412, "outcome": "passed"}, "call": {"name": "call", "duration": 19.548303666000038, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00013691600008769456, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_title_stage", "duration": 46.31059395700004, "run_index": 16, "setup": {"name": "setup", "duration": 1.557938207999996, "outcome": "passed"}, "call": {"name": "call", "duration": 43.19459683299999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012070800005403726, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_title_prod", "duration": 45.86976387500022, "run_index": 17, "setup": {"name": "setup", "duration": 1.447148625000068, "outcome": "passed"}, "call": {"name": "call", "duration": 42.97530700000004, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001596250000375221, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_mosaic_area_stage", "duration": 30.13201987599996, "run_index": 18, "setup": {"name": "setup", "duration": 1.5177067920000127, "outcome": "passed"}, "call": {"name": "call", "duration": 27.096484374999932, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012191700000130368, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_mosaic_area_prod", "duration": 57.994104999, "run_index": 19, "setup": {"name": "setup", "duration": 1.4981072909999966, "outcome": "passed"}, "call": {"name": "call", "duration": 54.997773209, "outcome": "failed", "longrepr": "self = <pages.desktop.test_gaming_desktop.TestGaming object at 0x111b8e730>, setup = None\n\n    def test_mosaic_area_prod(self, setup):\n        try:\n>           self.selenium_test.mosaic_area(self.selenium_test.main_url(urls.gaming_prod), \"mosaicArea\", \"prod\")\n\npages/desktop/test_gaming_desktop.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.global_functions.SeleniumTest object at 0x111cd7af0>, page = 'https://gaming.ebaumsworld.com/gaming/', classname = 'mosaicArea'\nenvironment = 'prod'\n\n    def mosaic_area(self, page: str, classname: str, environment: str):\n        links = []\n        links_id =[]\n    \n        if environment == \"stage\":\n            if self.open_url(page) and self.assert_mosaic(classname):\n                return True\n    \n        elif environment == \"prod\":\n            self.open_url(page)\n            self.assert_mosaic(classname)\n    \n            try:\n                wait = WebDriverWait(self.driver, 5)\n                element = wait.until(EC.element_to_be_clickable((By.ID, \"pmc-atlasmg-adhesion-close\")))\n                element.click()\n            except TimeoutException:\n                pass\n    \n            links.append(self.driver.find_element(By.ID, \"bigMosaicLink\").get_attribute(\"href\"))\n            for i in range(1, 5):\n                links.append(self.driver.find_element(By.ID, f\"smallMosaicLink-{i}\").get_attribute(\"href\"))\n    \n            actions = ActionChains(self.driver)\n            for i in range(len(links) - 1):\n                actions.key_down(Keys.COMMAND).click(\n                    self.driver.find_element(By.ID, f\"smallMosaicLink-{i + 1}\")).key_up(Keys.COMMAND)\n            actions.key_down(Keys.COMMAND).click(self.driver.find_element(By.ID, \"bigMosaicLink\")).key_up(Keys.COMMAND)\n            actions.perform()\n            time.sleep(3)\n    \n            for link in links:\n                links_id.append(link.split(\"/\")[-2])\n    \n            for i in range(1, min(len(links) + 1, len(self.driver.window_handles))):\n                self.driver.switch_to.window(self.driver.window_handles[i])\n                time.sleep(3)\n>               if self.driver.current_url.split(\"/\")[-2] not in links_id:\nE               IndexError: list index out of range\n\npages/global_functions.py:220: IndexError"}, "teardown": {"name": "teardown", "duration": 0.00011720800000603049, "outcome": "passed"}, "outcome": "failed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_add_shemedia_stage", "duration": 45.22082920800017, "run_index": 20, "setup": {"name": "setup", "duration": 1.5166342920000488, "outcome": "passed"}, "call": {"name": "call", "duration": 42.18745258299998, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010804100008954265, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_add_shemedia_prod", "duration": 19.594544458999962, "run_index": 21, "setup": {"name": "setup", "duration": 1.4914199170000302, "outcome": "passed"}, "call": {"name": "call", "duration": 16.611592041999984, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011258299991823151, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_login_stage", "duration": 61.68066991699993, "run_index": 22, "setup": {"name": "setup", "duration": 1.4311432079999804, "outcome": "passed"}, "call": {"name": "call", "duration": 58.81826370900001, "outcome": "passed", "stdout": "test_login STAGE\nError al aceptar cookies: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n"}, "teardown": {"name": "teardown", "duration": 0.00011979199996403622, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_open_url_stage", "duration": 40.67736891700031, "run_index": 23, "setup": {"name": "setup", "duration": 1.4579978750000464, "outcome": "passed"}, "call": {"name": "call", "duration": 37.761219875000165, "outcome": "passed", "stdout": "test_open_url STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.0001532920000499871, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_title_stage", "duration": 47.31383345900008, "run_index": 24, "setup": {"name": "setup", "duration": 1.5042321670000547, "outcome": "passed"}, "call": {"name": "call", "duration": 44.305199582999876, "outcome": "passed", "stdout": "test_title STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00016954200009422493, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_any_clip_stage", "duration": 64.39302929099995, "run_index": 25, "setup": {"name": "setup", "duration": 1.5497583329999998, "outcome": "passed"}, "call": {"name": "call", "duration": 61.29332887500004, "outcome": "xfailed", "xfail_reason": "", "longrepr": "self = <pages.desktop.test_main_desktop.TestMain object at 0x111b991c0>, setup = None\n\n    @pytest.mark.xfail\n    def test_any_clip_stage(self, setup):\n        try:\n            print(\"test_any_clip STAGE\")\n>           self.selenium_test.search_ad_by_class_name(self.selenium_test.main_url(urls.main_stage), \"mediaWidget\")\n\npages/desktop/test_main_desktop.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/global_functions.py:135: in search_ad_by_class_name\n    assert self.driver.find_element(By.CLASS_NAME, classname)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x111cff160>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .mediaWidget\",\"stac.../content/shared/webdriver/Errors.sys.mjs:511:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .mediaWidget; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException", "stdout": "test_any_clip STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00018374999990555807, "outcome": "passed"}, "outcome": "xfailed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_she_ads_conditional_stage", "duration": 43.15727945799995, "run_index": 26, "setup": {"name": "setup", "duration": 1.9004711249999673, "outcome": "passed"}, "call": {"name": "call", "duration": 39.35622870799989, "outcome": "passed", "stdout": "test_she_ads_conditional STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00010850000012396777, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_login_prod", "duration": 96.07376004199955, "run_index": 27, "setup": {"name": "setup", "duration": 1.5563794999998208, "outcome": "passed"}, "call": {"name": "call", "duration": 92.96088391700005, "outcome": "passed", "stdout": "test_login PROD\nError al aceptar cookies: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n"}, "teardown": {"name": "teardown", "duration": 0.0001171249998606072, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_open_url_prod", "duration": 45.13755487400044, "run_index": 28, "setup": {"name": "setup", "duration": 1.459356125000113, "outcome": "passed"}, "call": {"name": "call", "duration": 42.218718541000044, "outcome": "passed", "stdout": "test_open_url PROD\n"}, "teardown": {"name": "teardown", "duration": 0.0001240830001734139, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_title_prod", "duration": 45.832086502000266, "run_index": 29, "setup": {"name": "setup", "duration": 1.4922939590001079, "outcome": "passed"}, "call": {"name": "call", "duration": 42.84736808399998, "outcome": "passed", "stdout": "test_title PROD\n"}, "teardown": {"name": "teardown", "duration": 0.0001305000000684231, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_any_clip_prod", "duration": 62.065769125000315, "run_index": 30, "setup": {"name": "setup", "duration": 1.500491208000085, "outcome": "passed"}, "call": {"name": "call", "duration": 59.06465762500011, "outcome": "xfailed", "xfail_reason": "", "longrepr": "self = <pages.desktop.test_main_desktop.TestMain object at 0x111b99940>, setup = None\n\n    @pytest.mark.xfail\n    def test_any_clip_prod(self, setup):\n        try:\n            print(\"test_any_clip PROD\")\n>           self.selenium_test.search_ad_by_class_name(self.selenium_test.main_url(urls.main_prod), \"mediaWidget\")\n\npages/desktop/test_main_desktop.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/global_functions.py:135: in search_ad_by_class_name\n    assert self.driver.find_element(By.CLASS_NAME, classname)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x111e091c0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .mediaWidget\",\"stac.../content/shared/webdriver/Errors.sys.mjs:511:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .mediaWidget; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException", "stdout": "test_any_clip PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00012908400003652787, "outcome": "passed"}, "outcome": "xfailed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_she_ads_conditional_prod", "duration": 45.463121958999636, "run_index": 31, "setup": {"name": "setup", "duration": 1.5102510419999362, "outcome": "passed"}, "call": {"name": "call", "duration": 42.44248837499981, "outcome": "passed", "stdout": "test_she_ads_conditional PROD\n"}, "teardown": {"name": "teardown", "duration": 0.0001314999999522115, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_open_url_stage", "duration": 46.89477999900009, "run_index": 32, "setup": {"name": "setup", "duration": 1.5225831249999828, "outcome": "passed"}, "call": {"name": "call", "duration": 43.849493833, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011991600013061543, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_title_stage", "duration": 72.76135512600013, "run_index": 33, "setup": {"name": "setup", "duration": 1.5302788750000218, "outcome": "passed"}, "call": {"name": "call", "duration": 69.70066208399999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00013529200009543274, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_open_url_prod", "duration": 48.628913750000265, "run_index": 34, "setup": {"name": "setup", "duration": 1.4838473750000958, "outcome": "passed"}, "call": {"name": "call", "duration": 45.66108887500013, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001301249999414722, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_title_prod", "duration": 47.104247750999775, "run_index": 35, "setup": {"name": "setup", "duration": 1.5197190839999166, "outcome": "passed"}, "call": {"name": "call", "duration": 44.06468825000002, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012133299992456159, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_add_shemedia_stage", "duration": 28.16230016700024, "run_index": 36, "setup": {"name": "setup", "duration": 1.5288779170000453, "outcome": "passed"}, "call": {"name": "call", "duration": 25.104428625000082, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011570800006666104, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_add_shemedia_prod", "duration": 45.990887750000184, "run_index": 37, "setup": {"name": "setup", "duration": 1.5137469580001834, "outcome": "passed"}, "call": {"name": "call", "duration": 42.96326658399994, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001272499998776766, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_open_url_stage", "duration": 50.19003704000011, "run_index": 38, "setup": {"name": "setup", "duration": 1.5180839580000338, "outcome": "passed"}, "call": {"name": "call", "duration": 47.15374766600007, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012145799996687856, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_open_url_prod", "duration": 42.07362420799973, "run_index": 39, "setup": {"name": "setup", "duration": 1.517350166999904, "outcome": "passed"}, "call": {"name": "call", "duration": 39.03880858299999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011529099992912961, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_title_prod", "duration": 61.97811383399994, "run_index": 40, "setup": {"name": "setup", "duration": 1.5059579169999324, "outcome": "passed"}, "call": {"name": "call", "duration": 58.96608108300006, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011691700001392746, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_title_stage", "duration": 45.27470908600026, "run_index": 41, "setup": {"name": "setup", "duration": 1.5143967090000388, "outcome": "passed"}, "call": {"name": "call", "duration": 42.24580370900003, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011195900015081861, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_add_shemedia_stage", "duration": 21.71380379099992, "run_index": 42, "setup": {"name": "setup", "duration": 1.5148659999999836, "outcome": "passed"}, "call": {"name": "call", "duration": 18.683495916000084, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0005758749998676649, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_add_shemedia_prod", "duration": 45.66447266599994, "run_index": 43, "setup": {"name": "setup", "duration": 1.4571668329999738, "outcome": "passed"}, "call": {"name": "call", "duration": 42.749920083000006, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0002189169999837759, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_youtube_stage", "duration": 0.0003532910000103584, "run_index": 44, "setup": {"name": "setup", "duration": 0.00014170800000101735, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 12, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 6.98750000083237e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_twitter_stage", "duration": 0.00018570699990050343, "run_index": 45, "setup": {"name": "setup", "duration": 6.283299990172964e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 22, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 6.004100009704416e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_tik_tok_stage", "duration": 0.0004364999999779684, "run_index": 46, "setup": {"name": "setup", "duration": 0.00019199999996999395, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 32, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 5.25000000379805e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_instagram_stage", "duration": 0.00015699999971729994, "run_index": 47, "setup": {"name": "setup", "duration": 5.074999990029028e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 42, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 5.549999991671939e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_open_url_stage", "duration": 45.587027832999865, "run_index": 48, "setup": {"name": "setup", "duration": 1.5237051669998891, "outcome": "passed"}, "call": {"name": "call", "duration": 42.539495416000136, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012208299995108973, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_open_url_prod", "duration": 47.926070667000204, "run_index": 49, "setup": {"name": "setup", "duration": 1.5429391249999753, "outcome": "passed"}, "call": {"name": "call", "duration": 44.84007358300005, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011883400020451518, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_title_stage", "duration": 41.06412916599993, "run_index": 50, "setup": {"name": "setup", "duration": 1.4933295000000726, "outcome": "passed"}, "call": {"name": "call", "duration": 38.07735645799994, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011370799984433688, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_title_prod", "duration": 55.25479262599947, "run_index": 51, "setup": {"name": "setup", "duration": 1.4889587919997211, "outcome": "passed"}, "call": {"name": "call", "duration": 52.27672966699993, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00014537500010192161, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_add_shemedia_stage", "duration": 48.52406041600079, "run_index": 52, "setup": {"name": "setup", "duration": 1.4937156660002984, "outcome": "passed"}, "call": {"name": "call", "duration": 45.53651333400012, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011575000007724157, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_add_shemedia_prod", "duration": 27.438988206999966, "run_index": 53, "setup": {"name": "setup", "duration": 1.4950171659997977, "outcome": "passed"}, "call": {"name": "call", "duration": 24.448837708000156, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.000116167000214773, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/mobile/test_main_mobile.py::TestMain::test_login_stage", "duration": 0.0006025429997862375, "run_index": 54, "setup": {"name": "setup", "duration": 8.558399986213772e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/mobile/test_main_mobile.py', 13, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 0.00043137500006196206, "outcome": "passed"}, "outcome": "skipped"}], "summary": {"passed": 46, "failed": 2, "xfailed": 2, "skipped": 5, "num_tests": 55, "duration": 2261.4942650794983}, "created_at": "2024-06-10 15:45:40.879674"}}