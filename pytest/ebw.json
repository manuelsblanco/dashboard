{"report": {"environment": {"Python": "3.9.6", "Platform": "macOS-14.3-arm64-arm-64bit"}, "tests": [{"name": "desktop/test_articles_desktop.py::TestArticles::test_open_url_stage", "duration": 56.13985754, "run_index": 0, "setup": {"name": "setup", "duration": 2.8608418330000003, "outcome": "passed"}, "call": {"name": "call", "duration": 50.418065166, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010870800000617464, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_articles_desktop.py::TestArticles::test_open_url_prod", "duration": 31.500051874, "run_index": 1, "setup": {"name": "setup", "duration": 1.7275415829999972, "outcome": "passed"}, "call": {"name": "call", "duration": 28.044877375000006, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.133300000030431e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_articles_desktop.py::TestArticles::test_title_stage", "duration": 43.96483229199998, "run_index": 2, "setup": {"name": "setup", "duration": 1.6543228329999948, "outcome": "passed"}, "call": {"name": "call", "duration": 40.656096958999996, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 8.966699999746197e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_articles_desktop.py::TestArticles::test_title_prod", "duration": 49.235827541000006, "run_index": 3, "setup": {"name": "setup", "duration": 1.5763477080000001, "outcome": "passed"}, "call": {"name": "call", "duration": 46.083039416999995, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.270800001104362e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_articles_desktop.py::TestArticles::test_mosaic_area_stage", "duration": 42.37200224999998, "run_index": 4, "setup": {"name": "setup", "duration": 1.6160603749999893, "outcome": "passed"}, "call": {"name": "call", "duration": 39.139781666000005, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.983399999669018e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_articles_desktop.py::TestArticles::test_mosaic_area_prod", "duration": 39.13994445800003, "run_index": 5, "setup": {"name": "setup", "duration": 1.5933537080000235, "outcome": "passed"}, "call": {"name": "call", "duration": 35.953130542, "outcome": "failed", "longrepr": "self = <pages.desktop.test_articles_desktop.TestArticles object at 0x107365bb0>, setup = None\n\n    def test_mosaic_area_prod(self, setup):\n        try:\n>           self.selenium_test.mosaic_area(self.selenium_test.main_url(urls.articles_prod), \"mosaicArea\", \"prod\")\n\ndesktop/test_articles_desktop.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.global_functions.SeleniumTest object at 0x116aa9190>, page = 'https://www.ebaumsworld.com/articles/'\nclassname = 'mosaicArea', environment = 'prod'\n\n    def mosaic_area(self, page: str, classname: str, environment: str):\n        links = []\n    \n        if environment == \"stage\":\n            self.open_url(page)\n            self.assert_mosaic(classname)\n    \n        elif environment == \"prod\":\n            self.open_url(page)\n            self.assert_mosaic(classname)\n    \n            try:\n                wait = WebDriverWait(self.driver, 5)\n                element = wait.until(EC.element_to_be_clickable((By.ID, \"pmc-atlasmg-adhesion-close\")))\n                element.click()\n            except TimeoutException:\n                pass\n    \n            links.append(self.driver.find_element(By.ID, \"bigMosaicLink\").get_attribute(\"href\"))\n            for i in range(1, 5):\n                links.append(self.driver.find_element(By.ID, f\"smallMosaicLink-{i}\").get_attribute(\"href\"))\n    \n            actions = ActionChains(self.driver)\n            for i in range(len(links) - 1):\n                actions.key_down(Keys.COMMAND).click(\n                    self.driver.find_element(By.ID, f\"smallMosaicLink-{i + 1}\")).key_up(Keys.COMMAND)\n            actions.key_down(Keys.COMMAND).click(self.driver.find_element(By.ID, \"bigMosaicLink\")).key_up(Keys.COMMAND)\n            actions.perform()\n            time.sleep(3)\n    \n            for i in range(1, min(len(links) + 1, len(self.driver.window_handles))):\n                self.driver.switch_to.window(self.driver.window_handles[i])\n                time.sleep(2)\n>               assert self.driver.current_url in links\nE               AssertionError\n\nglobal_functions.py:208: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00010649999998690873, "outcome": "passed"}, "outcome": "failed"}, {"name": "desktop/test_articles_desktop.py::TestArticles::test_add_shemedia_stage", "duration": 83.82281049900001, "run_index": 6, "setup": {"name": "setup", "duration": 1.644974583000021, "outcome": "passed"}, "call": {"name": "call", "duration": 80.53277341699999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 8.791599998403399e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_articles_desktop.py::TestArticles::test_add_shemedia_prod", "duration": 25.07515666799992, "run_index": 7, "setup": {"name": "setup", "duration": 1.5867912919999867, "outcome": "passed"}, "call": {"name": "call", "duration": 21.901482041999998, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.204199994883311e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_galleries_desktop.py::TestGalleries::test_open_url_stage", "duration": 64.55859779299999, "run_index": 8, "setup": {"name": "setup", "duration": 1.5698879170000168, "outcome": "passed"}, "call": {"name": "call", "duration": 61.418727209, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.474999995973121e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_galleries_desktop.py::TestGalleries::test_open_url_prod", "duration": 25.925802541000053, "run_index": 9, "setup": {"name": "setup", "duration": 1.6535500830000274, "outcome": "passed"}, "call": {"name": "call", "duration": 22.618612250000012, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.012499998561907e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_galleries_desktop.py::TestGalleries::test_title_stage", "duration": 125.08077399900009, "run_index": 10, "setup": {"name": "setup", "duration": 1.6802087500000198, "outcome": "passed"}, "call": {"name": "call", "duration": 121.72026791600007, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 8.858299997882568e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_galleries_desktop.py::TestGalleries::test_title_prod", "duration": 48.733814748999976, "run_index": 11, "setup": {"name": "setup", "duration": 1.6493622499999674, "outcome": "passed"}, "call": {"name": "call", "duration": 45.43499854100003, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.170800001356838e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_galleries_desktop.py::TestGalleries::test_add_shemedia_stage", "duration": 24.010396457000184, "run_index": 12, "setup": {"name": "setup", "duration": 1.6647675830000708, "outcome": "passed"}, "call": {"name": "call", "duration": 20.680767958000047, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.33329999952548e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_galleries_desktop.py::TestGalleries::test_add_shemedia_prod", "duration": 22.275865040999975, "run_index": 13, "setup": {"name": "setup", "duration": 1.6518065000000206, "outcome": "passed"}, "call": {"name": "call", "duration": 18.972155457999975, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.658299995862762e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_gaming_desktop.py::TestGaming::test_open_url_stage", "duration": 30.062695083999984, "run_index": 14, "setup": {"name": "setup", "duration": 1.6529831670000021, "outcome": "passed"}, "call": {"name": "call", "duration": 26.756638500000008, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.024999997109262e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_gaming_desktop.py::TestGaming::test_open_url_prod", "duration": 21.849698625999963, "run_index": 15, "setup": {"name": "setup", "duration": 1.5994976669999232, "outcome": "passed"}, "call": {"name": "call", "duration": 18.650612417000048, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.087500006899063e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_gaming_desktop.py::TestGaming::test_title_stage", "duration": 60.00729329100011, "run_index": 16, "setup": {"name": "setup", "duration": 1.6175236670000004, "outcome": "passed"}, "call": {"name": "call", "duration": 56.77215479100005, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.116600006109365e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_gaming_desktop.py::TestGaming::test_title_prod", "duration": 34.79772237700013, "run_index": 17, "setup": {"name": "setup", "duration": 1.7237539590000779, "outcome": "passed"}, "call": {"name": "call", "duration": 31.35009904200001, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011541699996087118, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_gaming_desktop.py::TestGaming::test_mosaic_area_stage", "duration": 49.167774417000146, "run_index": 18, "setup": {"name": "setup", "duration": 1.6490382500001033, "outcome": "passed"}, "call": {"name": "call", "duration": 45.869591249999985, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001066669999545411, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_gaming_desktop.py::TestGaming::test_mosaic_area_prod", "duration": 103.48856924899997, "run_index": 19, "setup": {"name": "setup", "duration": 1.664464374999966, "outcome": "passed"}, "call": {"name": "call", "duration": 100.15954829100008, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.220799995546258e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_gaming_desktop.py::TestGaming::test_add_shemedia_stage", "duration": 21.944771499999774, "run_index": 20, "setup": {"name": "setup", "duration": 1.6540084579999075, "outcome": "passed"}, "call": {"name": "call", "duration": 18.636661042000014, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.354199994504597e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_gaming_desktop.py::TestGaming::test_add_shemedia_prod", "duration": 20.873291209000172, "run_index": 21, "setup": {"name": "setup", "duration": 1.5890238750000663, "outcome": "passed"}, "call": {"name": "call", "duration": 17.695129666999946, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001137920000928716, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_login_stage", "duration": 69.27152287700005, "run_index": 22, "setup": {"name": "setup", "duration": 1.6442911670000058, "outcome": "passed"}, "call": {"name": "call", "duration": 65.98284745899991, "outcome": "passed", "stdout": "test_login STAGE\nError al aceptar cookies: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n"}, "teardown": {"name": "teardown", "duration": 9.308400012741913e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_open_url_stage", "duration": 112.91739862600002, "run_index": 23, "setup": {"name": "setup", "duration": 1.7355246249999254, "outcome": "passed"}, "call": {"name": "call", "duration": 109.44625966700005, "outcome": "passed", "stdout": "test_open_url STAGE\n"}, "teardown": {"name": "teardown", "duration": 8.970900012172933e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_title_stage", "duration": 31.175450041999966, "run_index": 24, "setup": {"name": "setup", "duration": 1.5935277500000211, "outcome": "passed"}, "call": {"name": "call", "duration": 27.988304541999923, "outcome": "passed", "stdout": "test_title STAGE\n"}, "teardown": {"name": "teardown", "duration": 9.000000000014552e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_any_clip_stage", "duration": 51.07302516599998, "run_index": 25, "setup": {"name": "setup", "duration": 1.5687274580000121, "outcome": "passed"}, "call": {"name": "call", "duration": 47.93543866699997, "outcome": "xfailed", "xfail_reason": "", "longrepr": "self = <pages.desktop.test_main_desktop.TestMain object at 0x107391190>, setup = None\n\n    @pytest.mark.xfail\n    def test_any_clip_stage(self, setup):\n        try:\n            print(\"test_any_clip STAGE\")\n>           self.selenium_test.search_ad_by_class_name(self.selenium_test.main_url(urls.main_stage), \"mediaWidget\")\n\ndesktop/test_main_desktop.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nglobal_functions.py:127: in search_ad_by_class_name\n    assert self.driver.find_element(By.CLASS_NAME, classname)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x116b5b190>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .mediaWidget\",\"stac.../content/shared/webdriver/Errors.sys.mjs:509:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .mediaWidget; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException", "stdout": "test_any_clip STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00013158299998394796, "outcome": "passed"}, "outcome": "xfailed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_she_ads_conditional_stage", "duration": 33.867851251000275, "run_index": 26, "setup": {"name": "setup", "duration": 1.6115064590001111, "outcome": "passed"}, "call": {"name": "call", "duration": 30.64475266699992, "outcome": "passed", "stdout": "test_she_ads_conditional STAGE\n"}, "teardown": {"name": "teardown", "duration": 8.566600013182324e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_login_prod", "duration": 70.83118062599965, "run_index": 27, "setup": {"name": "setup", "duration": 1.5935515419998865, "outcome": "passed"}, "call": {"name": "call", "duration": 67.64398508399995, "outcome": "passed", "stdout": "test_login PROD\nError al aceptar cookies: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n"}, "teardown": {"name": "teardown", "duration": 9.245799992640968e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_open_url_prod", "duration": 19.630571790999966, "run_index": 28, "setup": {"name": "setup", "duration": 1.6327755830000115, "outcome": "passed"}, "call": {"name": "call", "duration": 16.364931625000054, "outcome": "passed", "stdout": "test_open_url PROD\n"}, "teardown": {"name": "teardown", "duration": 8.899999988898344e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_title_prod", "duration": 66.22980258300026, "run_index": 29, "setup": {"name": "setup", "duration": 1.583426500000087, "outcome": "passed"}, "call": {"name": "call", "duration": 63.062844625000025, "outcome": "passed", "stdout": "test_title PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00010495800006538047, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_any_clip_prod", "duration": 132.53880870899957, "run_index": 30, "setup": {"name": "setup", "duration": 1.719609791999801, "outcome": "passed"}, "call": {"name": "call", "duration": 129.099473, "outcome": "xfailed", "xfail_reason": "", "longrepr": "self = <pages.desktop.test_main_desktop.TestMain object at 0x107391910>, setup = None\n\n    @pytest.mark.xfail\n    def test_any_clip_prod(self, setup):\n        try:\n            print(\"test_any_clip PROD\")\n>           self.selenium_test.search_ad_by_class_name(self.selenium_test.main_url(urls.main_prod), \"mediaWidget\")\n\ndesktop/test_main_desktop.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nglobal_functions.py:127: in search_ad_by_class_name\n    assert self.driver.find_element(By.CLASS_NAME, classname)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x116b63130>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .mediaWidget\",\"stac.../content/shared/webdriver/Errors.sys.mjs:509:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .mediaWidget; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException", "stdout": "test_any_clip PROD\n"}, "teardown": {"name": "teardown", "duration": 0.0001161249999768188, "outcome": "passed"}, "outcome": "xfailed"}, {"name": "desktop/test_main_desktop.py::TestMain::test_she_ads_conditional_prod", "duration": 28.45128775099988, "run_index": 31, "setup": {"name": "setup", "duration": 1.6028506249999737, "outcome": "passed"}, "call": {"name": "call", "duration": 25.245477334000043, "outcome": "passed", "stdout": "test_she_ads_conditional PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00010916699989138579, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_newest_desktop.py::TestNewest::test_open_url_stage", "duration": 57.95123966699998, "run_index": 32, "setup": {"name": "setup", "duration": 1.6510798750000504, "outcome": "passed"}, "call": {"name": "call", "duration": 54.64898733399991, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.258299996872665e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_newest_desktop.py::TestNewest::test_title_stage", "duration": 56.596513707999975, "run_index": 33, "setup": {"name": "setup", "duration": 1.7997964999999567, "outcome": "passed"}, "call": {"name": "call", "duration": 52.996807250000074, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011345799998707662, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_newest_desktop.py::TestNewest::test_open_url_prod", "duration": 28.40387204000035, "run_index": 34, "setup": {"name": "setup", "duration": 1.5883669160000409, "outcome": "passed"}, "call": {"name": "call", "duration": 25.227048458000127, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 8.975000014288526e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_newest_desktop.py::TestNewest::test_title_prod", "duration": 26.125055666000435, "run_index": 35, "setup": {"name": "setup", "duration": 1.5701235000001361, "outcome": "passed"}, "call": {"name": "call", "duration": 22.98471591600014, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.275000002162415e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_newest_desktop.py::TestNewest::test_add_shemedia_stage", "duration": 22.050920956000027, "run_index": 36, "setup": {"name": "setup", "duration": 1.5810377909999715, "outcome": "passed"}, "call": {"name": "call", "duration": 18.888737457999923, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010791600016091252, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_newest_desktop.py::TestNewest::test_add_shemedia_prod", "duration": 97.10796470800051, "run_index": 37, "setup": {"name": "setup", "duration": 1.5769239580001795, "outcome": "passed"}, "call": {"name": "call", "duration": 93.95400591700013, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011087500001849548, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_popular_desktop.py::TestPopular::test_open_url_stage", "duration": 84.39499587499995, "run_index": 38, "setup": {"name": "setup", "duration": 1.6489472920000026, "outcome": "passed"}, "call": {"name": "call", "duration": 81.09700512500012, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.616599982109619e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_popular_desktop.py::TestPopular::test_open_url_prod", "duration": 66.41251379100004, "run_index": 39, "setup": {"name": "setup", "duration": 1.5833279999999377, "outcome": "passed"}, "call": {"name": "call", "duration": 63.24576425000009, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.354100006930821e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_popular_desktop.py::TestPopular::test_title_prod", "duration": 66.71838049999997, "run_index": 40, "setup": {"name": "setup", "duration": 1.585096582999995, "outcome": "passed"}, "call": {"name": "call", "duration": 63.54808379199994, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010354200003348524, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_popular_desktop.py::TestPopular::test_title_stage", "duration": 66.89211845799991, "run_index": 41, "setup": {"name": "setup", "duration": 1.5776577500000712, "outcome": "passed"}, "call": {"name": "call", "duration": 63.73671224999998, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.070799978871946e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_popular_desktop.py::TestPopular::test_add_shemedia_stage", "duration": 47.46570187600037, "run_index": 42, "setup": {"name": "setup", "duration": 1.5847689170000194, "outcome": "passed"}, "call": {"name": "call", "duration": 44.29607420800039, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 8.983399993667263e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_popular_desktop.py::TestPopular::test_add_shemedia_prod", "duration": 30.34229541699915, "run_index": 43, "setup": {"name": "setup", "duration": 1.6437604999996438, "outcome": "passed"}, "call": {"name": "call", "duration": 27.05466766699965, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010675000021365122, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_upload_desktop.py::TestUpload::test_video_youtube_stage", "duration": 0.00020837500096604344, "run_index": 44, "setup": {"name": "setup", "duration": 7.891700033724192e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 12, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 5.054100029155961e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "desktop/test_upload_desktop.py::TestUpload::test_video_twitter_stage", "duration": 0.00014141699921310646, "run_index": 45, "setup": {"name": "setup", "duration": 4.9124999804917024e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 22, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 4.3166999603272416e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "desktop/test_upload_desktop.py::TestUpload::test_video_tik_tok_stage", "duration": 0.0003180819994668127, "run_index": 46, "setup": {"name": "setup", "duration": 0.00013620799973068642, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 32, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 4.5666000005439855e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "desktop/test_upload_desktop.py::TestUpload::test_video_instagram_stage", "duration": 0.00013408299992079264, "run_index": 47, "setup": {"name": "setup", "duration": 4.549999994196696e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 42, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 4.308300003685872e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "desktop/test_videos_desktop.py::TestVideos::test_open_url_stage", "duration": 57.73185574799936, "run_index": 48, "setup": {"name": "setup", "duration": 1.6372009159999834, "outcome": "passed"}, "call": {"name": "call", "duration": 54.45736195799964, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.19579997571418e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_videos_desktop.py::TestVideos::test_open_url_prod", "duration": 43.693310708000354, "run_index": 49, "setup": {"name": "setup", "duration": 1.5745523750001666, "outcome": "passed"}, "call": {"name": "call", "duration": 40.544115500000316, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.045799970408552e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_videos_desktop.py::TestVideos::test_title_stage", "duration": 46.33925641699989, "run_index": 50, "setup": {"name": "setup", "duration": 1.5875074999999015, "outcome": "passed"}, "call": {"name": "call", "duration": 43.1641293749999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011204200018255506, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_videos_desktop.py::TestVideos::test_title_prod", "duration": 21.532381876999807, "run_index": 51, "setup": {"name": "setup", "duration": 1.7014734590002263, "outcome": "passed"}, "call": {"name": "call", "duration": 18.129328291999627, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010666699972716742, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_videos_desktop.py::TestVideos::test_add_shemedia_stage", "duration": 49.61223783300011, "run_index": 52, "setup": {"name": "setup", "duration": 1.6674612500000876, "outcome": "passed"}, "call": {"name": "call", "duration": 46.27720283300005, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011249999988649506, "outcome": "passed"}, "outcome": "passed"}, {"name": "desktop/test_videos_desktop.py::TestVideos::test_add_shemedia_prod", "duration": 48.90575695899997, "run_index": 53, "setup": {"name": "setup", "duration": 1.688898459000029, "outcome": "passed"}, "call": {"name": "call", "duration": 45.52784270799975, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001173330001620343, "outcome": "passed"}, "outcome": "passed"}, {"name": "mobile/test_main_mobile.py::TestMain::test_login_stage", "duration": 0.0006270419999054866, "run_index": 54, "setup": {"name": "setup", "duration": 9.399999999004649e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/mobile/test_main_mobile.py', 13, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 0.0004390419999253936, "outcome": "passed"}, "outcome": "skipped"}], "summary": {"passed": 47, "failed": 1, "xfailed": 2, "skipped": 5, "num_tests": 55, "duration": 2475.822825908661}, "created_at": "2024-02-02 20:39:08.926754"}}