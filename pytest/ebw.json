{"report": {"environment": {"Python": "3.9.6", "Platform": "macOS-14.3-arm64-arm-64bit"}, "tests": [{"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_open_url_stage", "duration": 79.79310041699999, "run_index": 0, "setup": {"name": "setup", "duration": 3.168868917, "outcome": "passed"}, "call": {"name": "call", "duration": 73.4552615, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010108299998989878, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_open_url_prod", "duration": 56.01510704099999, "run_index": 1, "setup": {"name": "setup", "duration": 1.6389435829999996, "outcome": "passed"}, "call": {"name": "call", "duration": 52.737118291, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010158399999227186, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_title_stage", "duration": 59.25281791699999, "run_index": 2, "setup": {"name": "setup", "duration": 1.5825080420000006, "outcome": "passed"}, "call": {"name": "call", "duration": 56.087695, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010683299998959228, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_title_prod", "duration": 49.42840325099999, "run_index": 3, "setup": {"name": "setup", "duration": 1.6267129590000025, "outcome": "passed"}, "call": {"name": "call", "duration": 46.174867250000005, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011008299998138682, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_mosaic_area_stage", "duration": 59.154818667, "run_index": 4, "setup": {"name": "setup", "duration": 1.5612943749999886, "outcome": "passed"}, "call": {"name": "call", "duration": 56.03211745799999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001124590000358694, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_mosaic_area_prod", "duration": 101.57180337599993, "run_index": 5, "setup": {"name": "setup", "duration": 1.5986157919999755, "outcome": "passed"}, "call": {"name": "call", "duration": 98.37446416699999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010762499999827924, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_add_shemedia_stage", "duration": 55.1039916659999, "run_index": 6, "setup": {"name": "setup", "duration": 1.5312212499999873, "outcome": "passed"}, "call": {"name": "call", "duration": 52.041422832999956, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012633299996878122, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_add_shemedia_prod", "duration": 79.84773825100012, "run_index": 7, "setup": {"name": "setup", "duration": 1.587883459000011, "outcome": "passed"}, "call": {"name": "call", "duration": 76.67185225000003, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011908300007235084, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_open_url_stage", "duration": 29.026322333000053, "run_index": 8, "setup": {"name": "setup", "duration": 1.5461991250000438, "outcome": "passed"}, "call": {"name": "call", "duration": 25.93380687499996, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011720800000603049, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_open_url_prod", "duration": 27.800134125, "run_index": 9, "setup": {"name": "setup", "duration": 1.5574947500000462, "outcome": "passed"}, "call": {"name": "call", "duration": 24.685010374999933, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00013424999997369014, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_title_stage", "duration": 21.85391345899984, "run_index": 10, "setup": {"name": "setup", "duration": 1.581275499999947, "outcome": "passed"}, "call": {"name": "call", "duration": 18.690726292000022, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0006361669999250807, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_title_prod", "duration": 8.78777825099985, "run_index": 11, "setup": {"name": "setup", "duration": 1.5741160000000036, "outcome": "passed"}, "call": {"name": "call", "duration": 5.639437083999951, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010916699989138579, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_add_shemedia_stage", "duration": 31.260265541999956, "run_index": 12, "setup": {"name": "setup", "duration": 1.6092557499999884, "outcome": "passed"}, "call": {"name": "call", "duration": 28.041643625000006, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011041699997349497, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_add_shemedia_prod", "duration": 61.45845033299997, "run_index": 13, "setup": {"name": "setup", "duration": 1.5593675000000076, "outcome": "passed"}, "call": {"name": "call", "duration": 58.33959916599997, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011616699998739932, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_open_url_stage", "duration": 47.647212501999775, "run_index": 14, "setup": {"name": "setup", "duration": 1.5731509589999177, "outcome": "passed"}, "call": {"name": "call", "duration": 44.50078841699997, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012216699997225078, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_open_url_prod", "duration": 42.29238900000007, "run_index": 15, "setup": {"name": "setup", "duration": 1.5666347500000484, "outcome": "passed"}, "call": {"name": "call", "duration": 39.15901604099997, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010345900000174879, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_title_stage", "duration": 48.901356499999906, "run_index": 16, "setup": {"name": "setup", "duration": 1.5596578749999708, "outcome": "passed"}, "call": {"name": "call", "duration": 45.78193658299995, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010416700001769641, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_title_prod", "duration": 78.51380162300006, "run_index": 17, "setup": {"name": "setup", "duration": 1.5489450410000245, "outcome": "passed"}, "call": {"name": "call", "duration": 75.41580770799999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010383300002558826, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_mosaic_area_stage", "duration": 46.70104170800005, "run_index": 18, "setup": {"name": "setup", "duration": 1.5755117080000218, "outcome": "passed"}, "call": {"name": "call", "duration": 43.549914917000024, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010337499998058775, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_mosaic_area_prod", "duration": 99.3797228760003, "run_index": 19, "setup": {"name": "setup", "duration": 1.5735297920000448, "outcome": "passed"}, "call": {"name": "call", "duration": 96.23256162500013, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010166700008085172, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_add_shemedia_stage", "duration": 20.485078542999872, "run_index": 20, "setup": {"name": "setup", "duration": 1.5963000839999495, "outcome": "passed"}, "call": {"name": "call", "duration": 17.29236558299999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011279199998170952, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_add_shemedia_prod", "duration": 49.484472582999615, "run_index": 21, "setup": {"name": "setup", "duration": 1.5739147079998475, "outcome": "passed"}, "call": {"name": "call", "duration": 46.33653474999983, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010841700009223132, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_login_stage", "duration": 107.1836182080001, "run_index": 22, "setup": {"name": "setup", "duration": 1.5621320000000196, "outcome": "passed"}, "call": {"name": "call", "duration": 104.05924466700003, "outcome": "passed", "stdout": "test_login STAGE\nError al aceptar cookies: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n"}, "teardown": {"name": "teardown", "duration": 0.0001095410000289121, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_open_url_stage", "duration": 22.018318792000173, "run_index": 23, "setup": {"name": "setup", "duration": 1.557927083000095, "outcome": "passed"}, "call": {"name": "call", "duration": 18.902356333999933, "outcome": "passed", "stdout": "test_open_url STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00010829200004991435, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_title_stage", "duration": 58.88022987500017, "run_index": 24, "setup": {"name": "setup", "duration": 1.527640750000046, "outcome": "passed"}, "call": {"name": "call", "duration": 55.824833000000126, "outcome": "passed", "stdout": "test_title STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00011537499995029066, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_any_clip_stage", "duration": 42.75027679200025, "run_index": 25, "setup": {"name": "setup", "duration": 1.6414381250001497, "outcome": "passed"}, "call": {"name": "call", "duration": 39.467266624999866, "outcome": "xfailed", "xfail_reason": "", "longrepr": "self = <pages.desktop.test_main_desktop.TestMain object at 0x105056310>, setup = None\n\n    @pytest.mark.xfail\n    def test_any_clip_stage(self, setup):\n        try:\n            print(\"test_any_clip STAGE\")\n>           self.selenium_test.search_ad_by_class_name(self.selenium_test.main_url(urls.main_stage), \"mediaWidget\")\n\npages/desktop/test_main_desktop.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/global_functions.py:127: in search_ad_by_class_name\n    assert self.driver.find_element(By.CLASS_NAME, classname)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1067c4d60>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .mediaWidget\",\"stac.../content/shared/webdriver/Errors.sys.mjs:509:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .mediaWidget; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException", "stdout": "test_any_clip STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00013391700008469343, "outcome": "passed"}, "outcome": "xfailed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_she_ads_conditional_stage", "duration": 65.88417795699979, "run_index": 26, "setup": {"name": "setup", "duration": 1.5852079579999554, "outcome": "passed"}, "call": {"name": "call", "duration": 62.71364066599995, "outcome": "passed", "stdout": "test_she_ads_conditional STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00012137499993514211, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_login_prod", "duration": 68.03791145900004, "run_index": 27, "setup": {"name": "setup", "duration": 1.5766301670000757, "outcome": "passed"}, "call": {"name": "call", "duration": 64.88454108299993, "outcome": "passed", "stdout": "test_login PROD\nError al aceptar cookies: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n"}, "teardown": {"name": "teardown", "duration": 0.0001100419999602309, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_open_url_prod", "duration": 10.75805349999996, "run_index": 28, "setup": {"name": "setup", "duration": 1.643637291999994, "outcome": "passed"}, "call": {"name": "call", "duration": 7.470685582999977, "outcome": "passed", "stdout": "test_open_url PROD\n"}, "teardown": {"name": "teardown", "duration": 9.33329999952548e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_title_prod", "duration": 65.59847637599978, "run_index": 29, "setup": {"name": "setup", "duration": 1.5638551669999288, "outcome": "passed"}, "call": {"name": "call", "duration": 62.47065708399987, "outcome": "passed", "stdout": "test_title PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00010895800005528145, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_any_clip_prod", "duration": 29.650820542000474, "run_index": 30, "setup": {"name": "setup", "duration": 1.5588085000001684, "outcome": "passed"}, "call": {"name": "call", "duration": 26.53307437500007, "outcome": "xfailed", "xfail_reason": "", "longrepr": "self = <pages.desktop.test_main_desktop.TestMain object at 0x105056a90>, setup = None\n\n    @pytest.mark.xfail\n    def test_any_clip_prod(self, setup):\n        try:\n            print(\"test_any_clip PROD\")\n>           self.selenium_test.search_ad_by_class_name(self.selenium_test.main_url(urls.main_prod), \"mediaWidget\")\n\npages/desktop/test_main_desktop.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/global_functions.py:127: in search_ad_by_class_name\n    assert self.driver.find_element(By.CLASS_NAME, classname)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1067fc520>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .mediaWidget\",\"stac.../content/shared/webdriver/Errors.sys.mjs:509:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .mediaWidget; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:509:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException", "stdout": "test_any_clip PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00012916700006826431, "outcome": "passed"}, "outcome": "xfailed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_she_ads_conditional_prod", "duration": 79.26055050000014, "run_index": 31, "setup": {"name": "setup", "duration": 1.5346854169999915, "outcome": "passed"}, "call": {"name": "call", "duration": 76.19105366600002, "outcome": "passed", "stdout": "test_she_ads_conditional PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00012600000013662793, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_open_url_stage", "duration": 60.2847383740002, "run_index": 32, "setup": {"name": "setup", "duration": 1.5757717080000475, "outcome": "passed"}, "call": {"name": "call", "duration": 57.13308929100003, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010566700007075269, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_title_stage", "duration": 47.05560212599994, "run_index": 33, "setup": {"name": "setup", "duration": 1.6473375000000487, "outcome": "passed"}, "call": {"name": "call", "duration": 43.76081383399992, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011329199992360373, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_open_url_prod", "duration": 90.55975116599984, "run_index": 34, "setup": {"name": "setup", "duration": 1.6549822499998754, "outcome": "passed"}, "call": {"name": "call", "duration": 87.24967133299992, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011533300016708381, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_title_prod", "duration": 24.658019542000147, "run_index": 35, "setup": {"name": "setup", "duration": 1.583947167000133, "outcome": "passed"}, "call": {"name": "call", "duration": 21.49001379099991, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011141699997097021, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_add_shemedia_stage", "duration": 86.60767241599979, "run_index": 36, "setup": {"name": "setup", "duration": 1.5574344579999888, "outcome": "passed"}, "call": {"name": "call", "duration": 83.49268845799998, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011504199983392027, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_add_shemedia_prod", "duration": 76.71889029299996, "run_index": 37, "setup": {"name": "setup", "duration": 1.5563092919999235, "outcome": "passed"}, "call": {"name": "call", "duration": 73.60616262500002, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010908400008702301, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_open_url_stage", "duration": 35.4733283329997, "run_index": 38, "setup": {"name": "setup", "duration": 1.5601837500000784, "outcome": "passed"}, "call": {"name": "call", "duration": 32.3528524999997, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001083329998436966, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_open_url_prod", "duration": 60.66892887399945, "run_index": 39, "setup": {"name": "setup", "duration": 1.5828837079998266, "outcome": "passed"}, "call": {"name": "call", "duration": 57.5030562500001, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010520799969526706, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_title_prod", "duration": 107.48334262299977, "run_index": 40, "setup": {"name": "setup", "duration": 1.579305665999982, "outcome": "passed"}, "call": {"name": "call", "duration": 104.324623083, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010820799980137963, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_title_stage", "duration": 77.47406479099982, "run_index": 41, "setup": {"name": "setup", "duration": 1.5884173750000627, "outcome": "passed"}, "call": {"name": "call", "duration": 74.29712516599966, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010487500003364403, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_add_shemedia_stage", "duration": 49.98077349999994, "run_index": 42, "setup": {"name": "setup", "duration": 1.5719643749998795, "outcome": "passed"}, "call": {"name": "call", "duration": 46.836739666000085, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010508400009712204, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_add_shemedia_prod", "duration": 62.18434187599996, "run_index": 43, "setup": {"name": "setup", "duration": 1.578855416999886, "outcome": "passed"}, "call": {"name": "call", "duration": 59.026519666999775, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011137500041513704, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_youtube_stage", "duration": 0.00023820999967938405, "run_index": 44, "setup": {"name": "setup", "duration": 8.833399988361634e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 12, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 6.154199991215137e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_twitter_stage", "duration": 0.00017791499885788653, "run_index": 45, "setup": {"name": "setup", "duration": 6.066599962650798e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 22, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 5.6582999604870565e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_tik_tok_stage", "duration": 0.0001643339996917348, "run_index": 46, "setup": {"name": "setup", "duration": 5.437499976324034e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 32, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 5.558400016525411e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_instagram_stage", "duration": 0.00015270900030373014, "run_index": 47, "setup": {"name": "setup", "duration": 5.0209000164613826e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 42, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 5.229099997450248e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_open_url_stage", "duration": 45.702675083999566, "run_index": 48, "setup": {"name": "setup", "duration": 1.567407541999728, "outcome": "passed"}, "call": {"name": "call", "duration": 42.56775625, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010375000010753865, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_open_url_prod", "duration": 8.67623624899943, "run_index": 49, "setup": {"name": "setup", "duration": 1.5638422909996734, "outcome": "passed"}, "call": {"name": "call", "duration": 5.548432250000133, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011941699995077215, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_title_stage", "duration": 303.5967621669997, "run_index": 50, "setup": {"name": "setup", "duration": 1.5341243339998982, "outcome": "passed"}, "call": {"name": "call", "duration": 300.52840316599986, "outcome": "failed", "longrepr": "self = <pages.desktop.test_videos_desktop.TestVideos object at 0x105069310>, setup = None\n\n    def test_title_stage(self, setup):\n        try:\n>           self.selenium_test.open_url(self.selenium_test.main_url(urls.videos_stage))\n\npages/desktop/test_videos_desktop.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/global_functions.py:105: in open_url\n    self.driver.get(url)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:353: in get\n    self.execute(Command.GET, {\"url\": url})\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10689f5b0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"Navigation timed out after 300000 ms\",\"stacktrace\":\"R...ote/content/shared/webdriver/Errors.sys.mjs:723:5\\\\nbail@chrome://remote/content/marionette/sync.sys.mjs:211:19\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: Navigation timed out after 300000 ms\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nE       TimeoutError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:723:5\nE       bail@chrome://remote/content/marionette/sync.sys.mjs:211:19\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException"}, "teardown": {"name": "teardown", "duration": 0.00011033300006602076, "outcome": "passed"}, "outcome": "failed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_title_prod", "duration": 76.02778129299986, "run_index": 51, "setup": {"name": "setup", "duration": 1.572521458999745, "outcome": "passed"}, "call": {"name": "call", "duration": 72.88263370799996, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010466700041433796, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_add_shemedia_stage", "duration": 62.963608999999906, "run_index": 52, "setup": {"name": "setup", "duration": 1.5845155000001796, "outcome": "passed"}, "call": {"name": "call", "duration": 59.794465041999956, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011295799959043507, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_add_shemedia_prod", "duration": 52.55415720899964, "run_index": 53, "setup": {"name": "setup", "duration": 1.5519857919998685, "outcome": "passed"}, "call": {"name": "call", "duration": 49.45008612499987, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 9.950000003300374e-05, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/mobile/test_main_mobile.py::TestMain::test_login_stage", "duration": 0.0005080419996374985, "run_index": 54, "setup": {"name": "setup", "duration": 7.162499969126657e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/mobile/test_main_mobile.py', 13, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 0.0003647920002549654, "outcome": "passed"}, "outcome": "skipped"}], "summary": {"passed": 47, "xfailed": 2, "skipped": 5, "failed": 1, "num_tests": 55, "duration": 2953.200697183609}, "created_at": "2024-02-15 13:53:17.653855"}}