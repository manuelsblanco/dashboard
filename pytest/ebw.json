{"report": {"environment": {"Python": "3.9.6", "Platform": "macOS-14.4.1-arm64-arm-64bit"}, "tests": [{"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_open_url_stage", "duration": 44.589325667000004, "run_index": 0, "setup": {"name": "setup", "duration": 0.904249958, "outcome": "passed"}, "call": {"name": "call", "duration": 42.780653584, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00017216700000233232, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_open_url_prod", "duration": 42.686521125, "run_index": 1, "setup": {"name": "setup", "duration": 1.3508708749999983, "outcome": "passed"}, "call": {"name": "call", "duration": 39.984667542, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001118330000053902, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_title_stage", "duration": 49.78187512400001, "run_index": 2, "setup": {"name": "setup", "duration": 1.418399082999997, "outcome": "passed"}, "call": {"name": "call", "duration": 46.94494500000002, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00013195799999721203, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_title_prod", "duration": 31.06418583300004, "run_index": 3, "setup": {"name": "setup", "duration": 1.4495162500000163, "outcome": "passed"}, "call": {"name": "call", "duration": 28.165026582999985, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012675000002104753, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_mosaic_area_stage", "duration": 24.114186417999974, "run_index": 4, "setup": {"name": "setup", "duration": 1.4030822919999935, "outcome": "passed"}, "call": {"name": "call", "duration": 21.307906167, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001156669999886617, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_mosaic_area_prod", "duration": 78.59774687400005, "run_index": 5, "setup": {"name": "setup", "duration": 1.4053747080000107, "outcome": "passed"}, "call": {"name": "call", "duration": 75.7867885, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0002089580000301794, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_add_shemedia_stage", "duration": 43.209826249999935, "run_index": 6, "setup": {"name": "setup", "duration": 1.4450352499999894, "outcome": "passed"}, "call": {"name": "call", "duration": 40.319635207999966, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012054199999056436, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_articles_desktop.py::TestArticles::test_add_shemedia_prod", "duration": 43.41593220900006, "run_index": 7, "setup": {"name": "setup", "duration": 1.3959875840000109, "outcome": "passed"}, "call": {"name": "call", "duration": 40.62382104100004, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00013599999999769352, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_open_url_stage", "duration": 49.71756608300001, "run_index": 8, "setup": {"name": "setup", "duration": 1.5101748330000078, "outcome": "passed"}, "call": {"name": "call", "duration": 46.697067791999984, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00014862500000845102, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_open_url_prod", "duration": 23.986172083999975, "run_index": 9, "setup": {"name": "setup", "duration": 1.5061624169999845, "outcome": "passed"}, "call": {"name": "call", "duration": 20.97373275000001, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011449999999513238, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_title_stage", "duration": 34.691131751000114, "run_index": 10, "setup": {"name": "setup", "duration": 1.4359379170000466, "outcome": "passed"}, "call": {"name": "call", "duration": 31.81914391700002, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011200000000144428, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_title_prod", "duration": 43.33124337500004, "run_index": 11, "setup": {"name": "setup", "duration": 1.4129550000000108, "outcome": "passed"}, "call": {"name": "call", "duration": 40.50522037500002, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011299999999891952, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_add_shemedia_stage", "duration": 43.55263391699998, "run_index": 12, "setup": {"name": "setup", "duration": 1.4441856249999887, "outcome": "passed"}, "call": {"name": "call", "duration": 40.664150749999976, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011191700002655125, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_galleries_desktop.py::TestGalleries::test_add_shemedia_prod", "duration": 27.455558458000155, "run_index": 13, "setup": {"name": "setup", "duration": 1.468120208000073, "outcome": "passed"}, "call": {"name": "call", "duration": 24.519197917000042, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012012499996671977, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_open_url_stage", "duration": 56.42859579200001, "run_index": 14, "setup": {"name": "setup", "duration": 1.4121145000000297, "outcome": "passed"}, "call": {"name": "call", "duration": 53.60425191699994, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011487500000839646, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_open_url_prod", "duration": 47.66443762500012, "run_index": 15, "setup": {"name": "setup", "duration": 1.397592750000058, "outcome": "passed"}, "call": {"name": "call", "duration": 44.869142624999995, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010950000000775617, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_title_stage", "duration": 28.183987459000036, "run_index": 16, "setup": {"name": "setup", "duration": 1.4109614169999531, "outcome": "passed"}, "call": {"name": "call", "duration": 25.361949000000095, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001156250000349246, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_title_prod", "duration": 24.384424709999962, "run_index": 17, "setup": {"name": "setup", "duration": 1.3921550840000236, "outcome": "passed"}, "call": {"name": "call", "duration": 21.599968749999903, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00014579200001207937, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_mosaic_area_stage", "duration": 34.09644575100015, "run_index": 18, "setup": {"name": "setup", "duration": 1.4448027090001005, "outcome": "passed"}, "call": {"name": "call", "duration": 31.20672583299995, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011449999999513238, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_mosaic_area_prod", "duration": 67.81866045800007, "run_index": 19, "setup": {"name": "setup", "duration": 1.481350582999994, "outcome": "passed"}, "call": {"name": "call", "duration": 64.85583941700008, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011987499999577267, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_add_shemedia_stage", "duration": 47.807191458000034, "run_index": 20, "setup": {"name": "setup", "duration": 1.469932125000014, "outcome": "passed"}, "call": {"name": "call", "duration": 44.86722145800002, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001057499999888023, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_gaming_desktop.py::TestGaming::test_add_shemedia_prod", "duration": 37.32426033499996, "run_index": 21, "setup": {"name": "setup", "duration": 1.3652170839999371, "outcome": "passed"}, "call": {"name": "call", "duration": 34.593664250000074, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00016191700001400022, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_login_stage", "duration": 100.51740733399981, "run_index": 22, "setup": {"name": "setup", "duration": 1.388123500000006, "outcome": "passed"}, "call": {"name": "call", "duration": 97.7410430839999, "outcome": "passed", "stdout": "test_login STAGE\nError al aceptar cookies: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:192:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:510:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n"}, "teardown": {"name": "teardown", "duration": 0.00011724999990292417, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_open_url_stage", "duration": 60.79164366700002, "run_index": 23, "setup": {"name": "setup", "duration": 1.457867166999904, "outcome": "passed"}, "call": {"name": "call", "duration": 57.87577337500011, "outcome": "passed", "stdout": "test_open_url STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00013595800010079984, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_title_stage", "duration": 42.80432699899961, "run_index": 24, "setup": {"name": "setup", "duration": 1.4736403329998211, "outcome": "passed"}, "call": {"name": "call", "duration": 39.856919957999935, "outcome": "passed", "stdout": "test_title STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00012637500003620517, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_any_clip_stage", "duration": 69.18105029200001, "run_index": 25, "setup": {"name": "setup", "duration": 1.4752906670000812, "outcome": "passed"}, "call": {"name": "call", "duration": 66.23033737499986, "outcome": "xfailed", "xfail_reason": "", "longrepr": "self = <pages.desktop.test_main_desktop.TestMain object at 0x1035ad190>, setup = None\n\n    @pytest.mark.xfail\n    def test_any_clip_stage(self, setup):\n        try:\n            print(\"test_any_clip STAGE\")\n>           self.selenium_test.search_ad_by_class_name(self.selenium_test.main_url(urls.main_stage), \"mediaWidget\")\n\npages/desktop/test_main_desktop.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/global_functions.py:129: in search_ad_by_class_name\n    assert self.driver.find_element(By.CLASS_NAME, classname)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x114d35e80>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .mediaWidget\",\"stac.../content/shared/webdriver/Errors.sys.mjs:510:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .mediaWidget; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:192:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:510:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException", "stdout": "test_any_clip STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.00013158299998394796, "outcome": "passed"}, "outcome": "xfailed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_she_ads_conditional_stage", "duration": 36.623684916999764, "run_index": 26, "setup": {"name": "setup", "duration": 1.4744860839998637, "outcome": "passed"}, "call": {"name": "call", "duration": 33.67459608299987, "outcome": "passed", "stdout": "test_she_ads_conditional STAGE\n"}, "teardown": {"name": "teardown", "duration": 0.0001166660001672426, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_login_prod", "duration": 79.38047054100002, "run_index": 27, "setup": {"name": "setup", "duration": 1.4075944579999486, "outcome": "passed"}, "call": {"name": "call", "duration": 76.56517054200003, "outcome": "passed", "stdout": "test_login PROD\nError al aceptar cookies: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:192:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:510:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n"}, "teardown": {"name": "teardown", "duration": 0.0001110830000925489, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_open_url_prod", "duration": 42.210080583000035, "run_index": 28, "setup": {"name": "setup", "duration": 1.4183202500000789, "outcome": "passed"}, "call": {"name": "call", "duration": 39.37332629100001, "outcome": "passed", "stdout": "test_open_url PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00011379199986549793, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_title_prod", "duration": 42.68724675000021, "run_index": 29, "setup": {"name": "setup", "duration": 1.4595568330000788, "outcome": "passed"}, "call": {"name": "call", "duration": 39.768007375000025, "outcome": "passed", "stdout": "test_title PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00012570900003083807, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_any_clip_prod", "duration": 62.594034500000134, "run_index": 30, "setup": {"name": "setup", "duration": 1.481529417000047, "outcome": "passed"}, "call": {"name": "call", "duration": 59.63084812500006, "outcome": "xfailed", "xfail_reason": "", "longrepr": "self = <pages.desktop.test_main_desktop.TestMain object at 0x1035ad910>, setup = None\n\n    @pytest.mark.xfail\n    def test_any_clip_prod(self, setup):\n        try:\n            print(\"test_any_clip PROD\")\n>           self.selenium_test.search_ad_by_class_name(self.selenium_test.main_url(urls.main_prod), \"mediaWidget\")\n\npages/desktop/test_main_desktop.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/global_functions.py:129: in search_ad_by_class_name\n    assert self.driver.find_element(By.CLASS_NAME, classname)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x114d6ddf0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .mediaWidget\",\"stac.../content/shared/webdriver/Errors.sys.mjs:510:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .mediaWidget; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:192:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:510:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException", "stdout": "test_any_clip PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00012754099998346646, "outcome": "passed"}, "outcome": "xfailed"}, {"name": "pages/desktop/test_main_desktop.py::TestMain::test_she_ads_conditional_prod", "duration": 23.120811916999855, "run_index": 31, "setup": {"name": "setup", "duration": 1.46819308299996, "outcome": "passed"}, "call": {"name": "call", "duration": 20.184309958999847, "outcome": "passed", "stdout": "test_she_ads_conditional PROD\n"}, "teardown": {"name": "teardown", "duration": 0.00011579200008782209, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_open_url_stage", "duration": 39.2715444160001, "run_index": 32, "setup": {"name": "setup", "duration": 1.501660333000018, "outcome": "passed"}, "call": {"name": "call", "duration": 36.268109874999936, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011387500012460805, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_title_stage", "duration": 33.45148404099996, "run_index": 33, "setup": {"name": "setup", "duration": 1.4774411250000412, "outcome": "passed"}, "call": {"name": "call", "duration": 30.49648795799999, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011383299988665385, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_open_url_prod", "duration": 34.09521391700059, "run_index": 34, "setup": {"name": "setup", "duration": 1.4855348750002122, "outcome": "passed"}, "call": {"name": "call", "duration": 31.124024875000032, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011929200013582886, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_title_prod", "duration": 26.623195794000367, "run_index": 35, "setup": {"name": "setup", "duration": 1.4758650840001337, "outcome": "passed"}, "call": {"name": "call", "duration": 23.67135566700017, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00010995899992849445, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_add_shemedia_stage", "duration": 28.541619459999993, "run_index": 36, "setup": {"name": "setup", "duration": 1.4613390839999738, "outcome": "passed"}, "call": {"name": "call", "duration": 25.61883629199997, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.000105000000075961, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_newest_desktop.py::TestNewest::test_add_shemedia_prod", "duration": 29.91925454300008, "run_index": 37, "setup": {"name": "setup", "duration": 1.413110209000024, "outcome": "passed"}, "call": {"name": "call", "duration": 27.092900999999983, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00013312500004758476, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_open_url_stage", "duration": 42.96450204199982, "run_index": 38, "setup": {"name": "setup", "duration": 1.4731911670000954, "outcome": "passed"}, "call": {"name": "call", "duration": 40.01799733299981, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012237499981893052, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_open_url_prod", "duration": 42.99719450099974, "run_index": 39, "setup": {"name": "setup", "duration": 1.4799856669999372, "outcome": "passed"}, "call": {"name": "call", "duration": 40.03711033399986, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011283300000286545, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_title_prod", "duration": 77.3065564590006, "run_index": 40, "setup": {"name": "setup", "duration": 1.3954465420001725, "outcome": "passed"}, "call": {"name": "call", "duration": 74.51552612500018, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001372500000798027, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_title_stage", "duration": 303.739171834, "run_index": 41, "setup": {"name": "setup", "duration": 1.4658277920000273, "outcome": "passed"}, "call": {"name": "call", "duration": 300.80733899999996, "outcome": "failed", "longrepr": "self = <pages.desktop.test_popular_desktop.TestPopular object at 0x1035b9fa0>, setup = None\n\n    def test_title_stage(self, setup):\n        try:\n>           self.selenium_test.open_url(self.selenium_test.main_url(urls.popular_stage))\n\npages/desktop/test_popular_desktop.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/global_functions.py:107: in open_url\n    self.driver.get(url)\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:353: in get\n    self.execute(Command.GET, {\"url\": url})\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x114ed9400>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"Navigation timed out after 300000 ms\",\"stacktrace\":\"R...ote/content/shared/webdriver/Errors.sys.mjs:739:5\\\\nbail@chrome://remote/content/marionette/sync.sys.mjs:211:19\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: Navigation timed out after 300000 ms\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:192:5\nE       TimeoutError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:739:5\nE       bail@chrome://remote/content/marionette/sync.sys.mjs:211:19\n\n/Library/Python/3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException"}, "teardown": {"name": "teardown", "duration": 0.0001772499999788124, "outcome": "passed"}, "outcome": "failed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_add_shemedia_stage", "duration": 28.567134541000996, "run_index": 42, "setup": {"name": "setup", "duration": 1.5568429580002885, "outcome": "passed"}, "call": {"name": "call", "duration": 25.453336667000258, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011195800016139401, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_popular_desktop.py::TestPopular::test_add_shemedia_prod", "duration": 49.69831341799954, "run_index": 43, "setup": {"name": "setup", "duration": 1.549202583999886, "outcome": "passed"}, "call": {"name": "call", "duration": 46.59975862500005, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00014962499972170917, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_youtube_stage", "duration": 0.0002545419997659337, "run_index": 44, "setup": {"name": "setup", "duration": 9.874999977910193e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 12, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 5.704200020772987e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_twitter_stage", "duration": 0.00016845800018927548, "run_index": 45, "setup": {"name": "setup", "duration": 5.687500015483238e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 22, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 5.4707999879610725e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_tik_tok_stage", "duration": 0.000168957999903796, "run_index": 46, "setup": {"name": "setup", "duration": 5.912500000704313e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 32, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 5.0707999889709754e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_upload_desktop.py::TestUpload::test_video_instagram_stage", "duration": 0.00016395899956478388, "run_index": 47, "setup": {"name": "setup", "duration": 5.46669998584548e-05, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/desktop/test_upload_desktop.py', 42, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 5.462499984787428e-05, "outcome": "passed"}, "outcome": "skipped"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_open_url_stage", "duration": 31.89913908400058, "run_index": 48, "setup": {"name": "setup", "duration": 1.4946380840001439, "outcome": "passed"}, "call": {"name": "call", "duration": 28.909749958000248, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00011295800004518242, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_open_url_prod", "duration": 77.22720416699985, "run_index": 49, "setup": {"name": "setup", "duration": 1.4878699169998981, "outcome": "passed"}, "call": {"name": "call", "duration": 74.25133512499997, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00012920800008942024, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_title_stage", "duration": 47.93254362599964, "run_index": 50, "setup": {"name": "setup", "duration": 1.4668879169998945, "outcome": "passed"}, "call": {"name": "call", "duration": 44.99862408399986, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00014370799999596784, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_title_prod", "duration": 52.194951543000116, "run_index": 51, "setup": {"name": "setup", "duration": 1.548765916999855, "outcome": "passed"}, "call": {"name": "call", "duration": 49.09723537500031, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.000184334000095987, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_add_shemedia_stage", "duration": 39.106343916999776, "run_index": 52, "setup": {"name": "setup", "duration": 1.5005440830000225, "outcome": "passed"}, "call": {"name": "call", "duration": 36.105137958999876, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001177919998553989, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/desktop/test_videos_desktop.py::TestVideos::test_add_shemedia_prod", "duration": 50.397927001000426, "run_index": 53, "setup": {"name": "setup", "duration": 1.513275374999921, "outcome": "passed"}, "call": {"name": "call", "duration": 47.37122083400027, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00015541700031462824, "outcome": "passed"}, "outcome": "passed"}, {"name": "pages/mobile/test_main_mobile.py::TestMain::test_login_stage", "duration": 0.0007397090007543738, "run_index": 54, "setup": {"name": "setup", "duration": 0.00011104200029876665, "outcome": "skipped", "longrepr": "('/Users/msb/Documents/Repos/EBW_Automation/pages/mobile/test_main_mobile.py', 13, 'Skipped: unconditional skip')"}, "teardown": {"name": "teardown", "duration": 0.0005176250001568405, "outcome": "passed"}, "outcome": "skipped"}], "summary": {"passed": 47, "xfailed": 2, "failed": 1, "skipped": 5, "num_tests": 55, "duration": 2447.89221906662}, "created_at": "2024-04-15 14:48:49.993604"}}